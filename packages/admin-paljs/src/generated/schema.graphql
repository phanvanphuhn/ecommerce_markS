### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AggregateCaseLog {
  _count: CaseLogCountAggregateOutputType
  _max: CaseLogMaxAggregateOutputType
  _min: CaseLogMinAggregateOutputType
}

type AggregateCaseLogSubmission {
  _count: CaseLogSubmissionCountAggregateOutputType
  _max: CaseLogSubmissionMaxAggregateOutputType
  _min: CaseLogSubmissionMinAggregateOutputType
}

type AggregateComplaint {
  _count: ComplaintCountAggregateOutputType
  _max: ComplaintMaxAggregateOutputType
  _min: ComplaintMinAggregateOutputType
}

type AggregateContactSearch {
  _avg: ContactSearchAvgAggregateOutputType
  _count: ContactSearchCountAggregateOutputType
  _max: ContactSearchMaxAggregateOutputType
  _min: ContactSearchMinAggregateOutputType
  _sum: ContactSearchSumAggregateOutputType
}

type AggregateLeaderboard {
  _count: LeaderboardCountAggregateOutputType
  _max: LeaderboardMaxAggregateOutputType
  _min: LeaderboardMinAggregateOutputType
}

type AggregateMobile_Sales {
  _avg: Mobile_SalesAvgAggregateOutputType
  _count: Mobile_SalesCountAggregateOutputType
  _max: Mobile_SalesMaxAggregateOutputType
  _min: Mobile_SalesMinAggregateOutputType
  _sum: Mobile_SalesSumAggregateOutputType
}

type AggregatePlanCall {
  _count: PlanCallCountAggregateOutputType
  _max: PlanCallMaxAggregateOutputType
  _min: PlanCallMinAggregateOutputType
}

type AggregateProducts {
  _count: ProductsCountAggregateOutputType
  _max: ProductsMaxAggregateOutputType
  _min: ProductsMinAggregateOutputType
}

type AggregateSales {
  _avg: SalesAvgAggregateOutputType
  _count: SalesCountAggregateOutputType
  _max: SalesMaxAggregateOutputType
  _min: SalesMinAggregateOutputType
  _sum: SalesSumAggregateOutputType
}

type AggregateSearchHistory {
  _count: SearchHistoryCountAggregateOutputType
  _max: SearchHistoryMaxAggregateOutputType
  _min: SearchHistoryMinAggregateOutputType
}

type AggregateSliderAndCommission {
  _avg: SliderAndCommissionAvgAggregateOutputType
  _count: SliderAndCommissionCountAggregateOutputType
  _max: SliderAndCommissionMaxAggregateOutputType
  _min: SliderAndCommissionMinAggregateOutputType
  _sum: SliderAndCommissionSumAggregateOutputType
}

type AggregateTerritoryCategorization {
  _avg: TerritoryCategorizationAvgAggregateOutputType
  _count: TerritoryCategorizationCountAggregateOutputType
  _max: TerritoryCategorizationMaxAggregateOutputType
  _min: TerritoryCategorizationMinAggregateOutputType
  _sum: TerritoryCategorizationSumAggregateOutputType
}

type AggregateUserProfile {
  _avg: UserProfileAvgAggregateOutputType
  _count: UserProfileCountAggregateOutputType
  _max: UserProfileMaxAggregateOutputType
  _min: UserProfileMinAggregateOutputType
  _sum: UserProfileSumAggregateOutputType
}

type BatchPayload {
  count: Int!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

type CaseLog {
  _count: CaseLogCountOutputType!
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  caseLogSubmission(cursor: CaseLogSubmissionWhereUniqueInput, distinct: [CaseLogSubmissionScalarFieldEnum], orderBy: [CaseLogSubmissionOrderByWithRelationInput], skip: Int, take: Int, where: CaseLogSubmissionWhereInput): [CaseLogSubmission!]!
  caseName: String
  contact: String
  createdAt: DateTime
  endDate: DateTime
  id: String!
  location: String
  photoPaths: [String!]!
  secondaryContact: String
  startDate: DateTime
  status: String
  updatedAt: DateTime
}

type CaseLogCountAggregateOutputType {
  _all: Int!
  account: Int!
  activityOwnerEmail: Int!
  activityOwnerName: Int!
  caseName: Int!
  contact: Int!
  createdAt: Int!
  endDate: Int!
  id: Int!
  location: Int!
  photoPaths: Int!
  secondaryContact: Int!
  startDate: Int!
  status: Int!
  updatedAt: Int!
}

input CaseLogCountOrderByAggregateInput {
  account: SortOrder
  activityOwnerEmail: SortOrder
  activityOwnerName: SortOrder
  caseName: SortOrder
  contact: SortOrder
  createdAt: SortOrder
  endDate: SortOrder
  id: SortOrder
  location: SortOrder
  photoPaths: SortOrder
  secondaryContact: SortOrder
  startDate: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

type CaseLogCountOutputType {
  caseLogSubmission: Int!
}

input CaseLogCreateInput {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  caseLogSubmission: CaseLogSubmissionCreateNestedManyWithoutCaseLogInput
  caseName: String
  contact: String
  createdAt: DateTime
  endDate: DateTime
  id: String
  location: String
  photoPaths: [String]
  secondaryContact: String
  startDate: DateTime
  status: String
  updatedAt: DateTime
}

input CaseLogCreateManyInput {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  caseName: String
  contact: String
  createdAt: DateTime
  endDate: DateTime
  id: String
  location: String
  photoPaths: [String]
  secondaryContact: String
  startDate: DateTime
  status: String
  updatedAt: DateTime
}

input CaseLogCreateNestedOneWithoutCaseLogSubmissionInput {
  connect: CaseLogWhereUniqueInput
  connectOrCreate: CaseLogCreateOrConnectWithoutCaseLogSubmissionInput
  create: CaseLogCreateWithoutCaseLogSubmissionInput
}

input CaseLogCreateOrConnectWithoutCaseLogSubmissionInput {
  create: CaseLogCreateWithoutCaseLogSubmissionInput!
  where: CaseLogWhereUniqueInput!
}

input CaseLogCreateWithoutCaseLogSubmissionInput {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  caseName: String
  contact: String
  createdAt: DateTime
  endDate: DateTime
  id: String
  location: String
  photoPaths: [String]
  secondaryContact: String
  startDate: DateTime
  status: String
  updatedAt: DateTime
}

input CaseLogCreatephotoPathsInput {
  set: String!
}

type CaseLogMaxAggregateOutputType {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  caseName: String
  contact: String
  createdAt: DateTime
  endDate: DateTime
  id: String
  location: String
  secondaryContact: String
  startDate: DateTime
  status: String
  updatedAt: DateTime
}

input CaseLogMaxOrderByAggregateInput {
  account: SortOrder
  activityOwnerEmail: SortOrder
  activityOwnerName: SortOrder
  caseName: SortOrder
  contact: SortOrder
  createdAt: SortOrder
  endDate: SortOrder
  id: SortOrder
  location: SortOrder
  secondaryContact: SortOrder
  startDate: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

type CaseLogMinAggregateOutputType {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  caseName: String
  contact: String
  createdAt: DateTime
  endDate: DateTime
  id: String
  location: String
  secondaryContact: String
  startDate: DateTime
  status: String
  updatedAt: DateTime
}

input CaseLogMinOrderByAggregateInput {
  account: SortOrder
  activityOwnerEmail: SortOrder
  activityOwnerName: SortOrder
  caseName: SortOrder
  contact: SortOrder
  createdAt: SortOrder
  endDate: SortOrder
  id: SortOrder
  location: SortOrder
  secondaryContact: SortOrder
  startDate: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input CaseLogNullableRelationFilter {
  is: CaseLogWhereInput
  isNot: CaseLogWhereInput
}

input CaseLogOrderByWithAggregationInput {
  _count: CaseLogCountOrderByAggregateInput
  _max: CaseLogMaxOrderByAggregateInput
  _min: CaseLogMinOrderByAggregateInput
  account: SortOrderInput
  activityOwnerEmail: SortOrderInput
  activityOwnerName: SortOrderInput
  caseName: SortOrderInput
  contact: SortOrderInput
  createdAt: SortOrderInput
  endDate: SortOrderInput
  id: SortOrder
  location: SortOrderInput
  photoPaths: SortOrder
  secondaryContact: SortOrderInput
  startDate: SortOrderInput
  status: SortOrderInput
  updatedAt: SortOrderInput
}

input CaseLogOrderByWithRelationInput {
  account: SortOrderInput
  activityOwnerEmail: SortOrderInput
  activityOwnerName: SortOrderInput
  caseLogSubmission: CaseLogSubmissionOrderByRelationAggregateInput
  caseName: SortOrderInput
  contact: SortOrderInput
  createdAt: SortOrderInput
  endDate: SortOrderInput
  id: SortOrder
  location: SortOrderInput
  photoPaths: SortOrder
  secondaryContact: SortOrderInput
  startDate: SortOrderInput
  status: SortOrderInput
  updatedAt: SortOrderInput
}

enum CaseLogScalarFieldEnum {
  account
  activityOwnerEmail
  activityOwnerName
  caseName
  contact
  createdAt
  endDate
  id
  location
  photoPaths
  secondaryContact
  startDate
  status
  updatedAt
}

input CaseLogScalarWhereWithAggregatesInput {
  AND: [CaseLogScalarWhereWithAggregatesInput]
  NOT: [CaseLogScalarWhereWithAggregatesInput]
  OR: [CaseLogScalarWhereWithAggregatesInput]
  account: StringNullableWithAggregatesFilter
  activityOwnerEmail: StringNullableWithAggregatesFilter
  activityOwnerName: StringNullableWithAggregatesFilter
  caseName: StringNullableWithAggregatesFilter
  contact: StringNullableWithAggregatesFilter
  createdAt: DateTimeNullableWithAggregatesFilter
  endDate: DateTimeNullableWithAggregatesFilter
  id: UuidWithAggregatesFilter
  location: StringNullableWithAggregatesFilter
  photoPaths: StringNullableListFilter
  secondaryContact: StringNullableWithAggregatesFilter
  startDate: DateTimeNullableWithAggregatesFilter
  status: StringNullableWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

type CaseLogSubmission {
  caseLog(where: CaseLogWhereInput): CaseLog
  caseLogId: String
  createdAt: DateTime
  id: String!
  product(where: ProductsWhereInput): Products
  productId: String
  quantity: String
  salesRepEmail: String
  updatedAt: DateTime
}

type CaseLogSubmissionCountAggregateOutputType {
  _all: Int!
  caseLogId: Int!
  createdAt: Int!
  id: Int!
  productId: Int!
  quantity: Int!
  salesRepEmail: Int!
  updatedAt: Int!
}

input CaseLogSubmissionCountOrderByAggregateInput {
  caseLogId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  productId: SortOrder
  quantity: SortOrder
  salesRepEmail: SortOrder
  updatedAt: SortOrder
}

input CaseLogSubmissionCreateInput {
  caseLog: CaseLogCreateNestedOneWithoutCaseLogSubmissionInput
  createdAt: DateTime
  id: String
  product: ProductsCreateNestedOneWithoutCaseLogSubmissionInput
  quantity: String
  salesRepEmail: String
  updatedAt: DateTime
}

input CaseLogSubmissionCreateManyCaseLogInput {
  createdAt: DateTime
  id: String
  productId: String
  quantity: String
  salesRepEmail: String
  updatedAt: DateTime
}

input CaseLogSubmissionCreateManyCaseLogInputEnvelope {
  data: CaseLogSubmissionCreateManyCaseLogInput!
  skipDuplicates: Boolean
}

input CaseLogSubmissionCreateManyInput {
  caseLogId: String
  createdAt: DateTime
  id: String
  productId: String
  quantity: String
  salesRepEmail: String
  updatedAt: DateTime
}

input CaseLogSubmissionCreateManyProductInput {
  caseLogId: String
  createdAt: DateTime
  id: String
  quantity: String
  salesRepEmail: String
  updatedAt: DateTime
}

input CaseLogSubmissionCreateManyProductInputEnvelope {
  data: CaseLogSubmissionCreateManyProductInput!
  skipDuplicates: Boolean
}

input CaseLogSubmissionCreateNestedManyWithoutCaseLogInput {
  connect: [CaseLogSubmissionWhereUniqueInput]
  connectOrCreate: [CaseLogSubmissionCreateOrConnectWithoutCaseLogInput]
  create: [CaseLogSubmissionCreateWithoutCaseLogInput]
  createMany: CaseLogSubmissionCreateManyCaseLogInputEnvelope
}

input CaseLogSubmissionCreateNestedManyWithoutProductInput {
  connect: [CaseLogSubmissionWhereUniqueInput]
  connectOrCreate: [CaseLogSubmissionCreateOrConnectWithoutProductInput]
  create: [CaseLogSubmissionCreateWithoutProductInput]
  createMany: CaseLogSubmissionCreateManyProductInputEnvelope
}

input CaseLogSubmissionCreateOrConnectWithoutCaseLogInput {
  create: CaseLogSubmissionCreateWithoutCaseLogInput!
  where: CaseLogSubmissionWhereUniqueInput!
}

input CaseLogSubmissionCreateOrConnectWithoutProductInput {
  create: CaseLogSubmissionCreateWithoutProductInput!
  where: CaseLogSubmissionWhereUniqueInput!
}

input CaseLogSubmissionCreateWithoutCaseLogInput {
  createdAt: DateTime
  id: String
  product: ProductsCreateNestedOneWithoutCaseLogSubmissionInput
  quantity: String
  salesRepEmail: String
  updatedAt: DateTime
}

input CaseLogSubmissionCreateWithoutProductInput {
  caseLog: CaseLogCreateNestedOneWithoutCaseLogSubmissionInput
  createdAt: DateTime
  id: String
  quantity: String
  salesRepEmail: String
  updatedAt: DateTime
}

input CaseLogSubmissionListRelationFilter {
  every: CaseLogSubmissionWhereInput
  none: CaseLogSubmissionWhereInput
  some: CaseLogSubmissionWhereInput
}

type CaseLogSubmissionMaxAggregateOutputType {
  caseLogId: String
  createdAt: DateTime
  id: String
  productId: String
  quantity: String
  salesRepEmail: String
  updatedAt: DateTime
}

input CaseLogSubmissionMaxOrderByAggregateInput {
  caseLogId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  productId: SortOrder
  quantity: SortOrder
  salesRepEmail: SortOrder
  updatedAt: SortOrder
}

type CaseLogSubmissionMinAggregateOutputType {
  caseLogId: String
  createdAt: DateTime
  id: String
  productId: String
  quantity: String
  salesRepEmail: String
  updatedAt: DateTime
}

input CaseLogSubmissionMinOrderByAggregateInput {
  caseLogId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  productId: SortOrder
  quantity: SortOrder
  salesRepEmail: SortOrder
  updatedAt: SortOrder
}

input CaseLogSubmissionOrderByRelationAggregateInput {
  _count: SortOrder
}

input CaseLogSubmissionOrderByWithAggregationInput {
  _count: CaseLogSubmissionCountOrderByAggregateInput
  _max: CaseLogSubmissionMaxOrderByAggregateInput
  _min: CaseLogSubmissionMinOrderByAggregateInput
  caseLogId: SortOrderInput
  createdAt: SortOrderInput
  id: SortOrder
  productId: SortOrderInput
  quantity: SortOrderInput
  salesRepEmail: SortOrderInput
  updatedAt: SortOrderInput
}

input CaseLogSubmissionOrderByWithRelationInput {
  caseLog: CaseLogOrderByWithRelationInput
  caseLogId: SortOrderInput
  createdAt: SortOrderInput
  id: SortOrder
  product: ProductsOrderByWithRelationInput
  productId: SortOrderInput
  quantity: SortOrderInput
  salesRepEmail: SortOrderInput
  updatedAt: SortOrderInput
}

enum CaseLogSubmissionScalarFieldEnum {
  caseLogId
  createdAt
  id
  productId
  quantity
  salesRepEmail
  updatedAt
}

input CaseLogSubmissionScalarWhereInput {
  AND: [CaseLogSubmissionScalarWhereInput]
  NOT: [CaseLogSubmissionScalarWhereInput]
  OR: [CaseLogSubmissionScalarWhereInput]
  caseLogId: UuidNullableFilter
  createdAt: DateTimeNullableFilter
  id: UuidFilter
  productId: UuidNullableFilter
  quantity: StringNullableFilter
  salesRepEmail: StringNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CaseLogSubmissionScalarWhereWithAggregatesInput {
  AND: [CaseLogSubmissionScalarWhereWithAggregatesInput]
  NOT: [CaseLogSubmissionScalarWhereWithAggregatesInput]
  OR: [CaseLogSubmissionScalarWhereWithAggregatesInput]
  caseLogId: UuidNullableWithAggregatesFilter
  createdAt: DateTimeNullableWithAggregatesFilter
  id: UuidWithAggregatesFilter
  productId: UuidNullableWithAggregatesFilter
  quantity: StringNullableWithAggregatesFilter
  salesRepEmail: StringNullableWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input CaseLogSubmissionUncheckedCreateInput {
  caseLogId: String
  createdAt: DateTime
  id: String
  productId: String
  quantity: String
  salesRepEmail: String
  updatedAt: DateTime
}

input CaseLogSubmissionUncheckedCreateNestedManyWithoutCaseLogInput {
  connect: [CaseLogSubmissionWhereUniqueInput]
  connectOrCreate: [CaseLogSubmissionCreateOrConnectWithoutCaseLogInput]
  create: [CaseLogSubmissionCreateWithoutCaseLogInput]
  createMany: CaseLogSubmissionCreateManyCaseLogInputEnvelope
}

input CaseLogSubmissionUncheckedCreateNestedManyWithoutProductInput {
  connect: [CaseLogSubmissionWhereUniqueInput]
  connectOrCreate: [CaseLogSubmissionCreateOrConnectWithoutProductInput]
  create: [CaseLogSubmissionCreateWithoutProductInput]
  createMany: CaseLogSubmissionCreateManyProductInputEnvelope
}

input CaseLogSubmissionUncheckedCreateWithoutCaseLogInput {
  createdAt: DateTime
  id: String
  productId: String
  quantity: String
  salesRepEmail: String
  updatedAt: DateTime
}

input CaseLogSubmissionUncheckedCreateWithoutProductInput {
  caseLogId: String
  createdAt: DateTime
  id: String
  quantity: String
  salesRepEmail: String
  updatedAt: DateTime
}

input CaseLogSubmissionUncheckedUpdateInput {
  caseLogId: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  productId: NullableStringFieldUpdateOperationsInput
  quantity: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogSubmissionUncheckedUpdateManyInput {
  caseLogId: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  productId: NullableStringFieldUpdateOperationsInput
  quantity: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogSubmissionUncheckedUpdateManyWithoutCaseLogInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  productId: NullableStringFieldUpdateOperationsInput
  quantity: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogSubmissionUncheckedUpdateManyWithoutCaseLogNestedInput {
  connect: [CaseLogSubmissionWhereUniqueInput]
  connectOrCreate: [CaseLogSubmissionCreateOrConnectWithoutCaseLogInput]
  create: [CaseLogSubmissionCreateWithoutCaseLogInput]
  createMany: CaseLogSubmissionCreateManyCaseLogInputEnvelope
  delete: [CaseLogSubmissionWhereUniqueInput]
  deleteMany: [CaseLogSubmissionScalarWhereInput]
  disconnect: [CaseLogSubmissionWhereUniqueInput]
  set: [CaseLogSubmissionWhereUniqueInput]
  update: [CaseLogSubmissionUpdateWithWhereUniqueWithoutCaseLogInput]
  updateMany: [CaseLogSubmissionUpdateManyWithWhereWithoutCaseLogInput]
  upsert: [CaseLogSubmissionUpsertWithWhereUniqueWithoutCaseLogInput]
}

input CaseLogSubmissionUncheckedUpdateManyWithoutProductInput {
  caseLogId: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  quantity: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogSubmissionUncheckedUpdateManyWithoutProductNestedInput {
  connect: [CaseLogSubmissionWhereUniqueInput]
  connectOrCreate: [CaseLogSubmissionCreateOrConnectWithoutProductInput]
  create: [CaseLogSubmissionCreateWithoutProductInput]
  createMany: CaseLogSubmissionCreateManyProductInputEnvelope
  delete: [CaseLogSubmissionWhereUniqueInput]
  deleteMany: [CaseLogSubmissionScalarWhereInput]
  disconnect: [CaseLogSubmissionWhereUniqueInput]
  set: [CaseLogSubmissionWhereUniqueInput]
  update: [CaseLogSubmissionUpdateWithWhereUniqueWithoutProductInput]
  updateMany: [CaseLogSubmissionUpdateManyWithWhereWithoutProductInput]
  upsert: [CaseLogSubmissionUpsertWithWhereUniqueWithoutProductInput]
}

input CaseLogSubmissionUncheckedUpdateWithoutCaseLogInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  productId: NullableStringFieldUpdateOperationsInput
  quantity: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogSubmissionUncheckedUpdateWithoutProductInput {
  caseLogId: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  quantity: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogSubmissionUpdateInput {
  caseLog: CaseLogUpdateOneWithoutCaseLogSubmissionNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  product: ProductsUpdateOneWithoutCaseLogSubmissionNestedInput
  quantity: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogSubmissionUpdateManyMutationInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  quantity: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogSubmissionUpdateManyWithWhereWithoutCaseLogInput {
  data: CaseLogSubmissionUpdateManyMutationInput!
  where: CaseLogSubmissionScalarWhereInput!
}

input CaseLogSubmissionUpdateManyWithWhereWithoutProductInput {
  data: CaseLogSubmissionUpdateManyMutationInput!
  where: CaseLogSubmissionScalarWhereInput!
}

input CaseLogSubmissionUpdateManyWithoutCaseLogNestedInput {
  connect: [CaseLogSubmissionWhereUniqueInput]
  connectOrCreate: [CaseLogSubmissionCreateOrConnectWithoutCaseLogInput]
  create: [CaseLogSubmissionCreateWithoutCaseLogInput]
  createMany: CaseLogSubmissionCreateManyCaseLogInputEnvelope
  delete: [CaseLogSubmissionWhereUniqueInput]
  deleteMany: [CaseLogSubmissionScalarWhereInput]
  disconnect: [CaseLogSubmissionWhereUniqueInput]
  set: [CaseLogSubmissionWhereUniqueInput]
  update: [CaseLogSubmissionUpdateWithWhereUniqueWithoutCaseLogInput]
  updateMany: [CaseLogSubmissionUpdateManyWithWhereWithoutCaseLogInput]
  upsert: [CaseLogSubmissionUpsertWithWhereUniqueWithoutCaseLogInput]
}

input CaseLogSubmissionUpdateManyWithoutProductNestedInput {
  connect: [CaseLogSubmissionWhereUniqueInput]
  connectOrCreate: [CaseLogSubmissionCreateOrConnectWithoutProductInput]
  create: [CaseLogSubmissionCreateWithoutProductInput]
  createMany: CaseLogSubmissionCreateManyProductInputEnvelope
  delete: [CaseLogSubmissionWhereUniqueInput]
  deleteMany: [CaseLogSubmissionScalarWhereInput]
  disconnect: [CaseLogSubmissionWhereUniqueInput]
  set: [CaseLogSubmissionWhereUniqueInput]
  update: [CaseLogSubmissionUpdateWithWhereUniqueWithoutProductInput]
  updateMany: [CaseLogSubmissionUpdateManyWithWhereWithoutProductInput]
  upsert: [CaseLogSubmissionUpsertWithWhereUniqueWithoutProductInput]
}

input CaseLogSubmissionUpdateWithWhereUniqueWithoutCaseLogInput {
  data: CaseLogSubmissionUpdateWithoutCaseLogInput!
  where: CaseLogSubmissionWhereUniqueInput!
}

input CaseLogSubmissionUpdateWithWhereUniqueWithoutProductInput {
  data: CaseLogSubmissionUpdateWithoutProductInput!
  where: CaseLogSubmissionWhereUniqueInput!
}

input CaseLogSubmissionUpdateWithoutCaseLogInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  product: ProductsUpdateOneWithoutCaseLogSubmissionNestedInput
  quantity: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogSubmissionUpdateWithoutProductInput {
  caseLog: CaseLogUpdateOneWithoutCaseLogSubmissionNestedInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  quantity: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogSubmissionUpsertWithWhereUniqueWithoutCaseLogInput {
  create: CaseLogSubmissionCreateWithoutCaseLogInput!
  update: CaseLogSubmissionUpdateWithoutCaseLogInput!
  where: CaseLogSubmissionWhereUniqueInput!
}

input CaseLogSubmissionUpsertWithWhereUniqueWithoutProductInput {
  create: CaseLogSubmissionCreateWithoutProductInput!
  update: CaseLogSubmissionUpdateWithoutProductInput!
  where: CaseLogSubmissionWhereUniqueInput!
}

input CaseLogSubmissionWhereInput {
  AND: [CaseLogSubmissionWhereInput]
  NOT: [CaseLogSubmissionWhereInput]
  OR: [CaseLogSubmissionWhereInput]
  caseLog: CaseLogNullableRelationFilter
  caseLogId: UuidNullableFilter
  createdAt: DateTimeNullableFilter
  id: UuidFilter
  product: ProductsNullableRelationFilter
  productId: UuidNullableFilter
  quantity: StringNullableFilter
  salesRepEmail: StringNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CaseLogSubmissionWhereUniqueInput {
  AND: [CaseLogSubmissionWhereInput]
  NOT: [CaseLogSubmissionWhereInput]
  OR: [CaseLogSubmissionWhereInput]
  caseLog: CaseLogNullableRelationFilter
  caseLogId: UuidNullableFilter
  createdAt: DateTimeNullableFilter
  id: String
  product: ProductsNullableRelationFilter
  productId: UuidNullableFilter
  quantity: StringNullableFilter
  salesRepEmail: StringNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CaseLogUncheckedCreateInput {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  caseLogSubmission: CaseLogSubmissionUncheckedCreateNestedManyWithoutCaseLogInput
  caseName: String
  contact: String
  createdAt: DateTime
  endDate: DateTime
  id: String
  location: String
  photoPaths: [String]
  secondaryContact: String
  startDate: DateTime
  status: String
  updatedAt: DateTime
}

input CaseLogUncheckedCreateWithoutCaseLogSubmissionInput {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  caseName: String
  contact: String
  createdAt: DateTime
  endDate: DateTime
  id: String
  location: String
  photoPaths: [String]
  secondaryContact: String
  startDate: DateTime
  status: String
  updatedAt: DateTime
}

input CaseLogUncheckedUpdateInput {
  account: NullableStringFieldUpdateOperationsInput
  activityOwnerEmail: NullableStringFieldUpdateOperationsInput
  activityOwnerName: NullableStringFieldUpdateOperationsInput
  caseLogSubmission: CaseLogSubmissionUncheckedUpdateManyWithoutCaseLogNestedInput
  caseName: NullableStringFieldUpdateOperationsInput
  contact: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  photoPaths: [String]
  secondaryContact: NullableStringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogUncheckedUpdateManyInput {
  account: NullableStringFieldUpdateOperationsInput
  activityOwnerEmail: NullableStringFieldUpdateOperationsInput
  activityOwnerName: NullableStringFieldUpdateOperationsInput
  caseName: NullableStringFieldUpdateOperationsInput
  contact: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  photoPaths: [String]
  secondaryContact: NullableStringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogUncheckedUpdateWithoutCaseLogSubmissionInput {
  account: NullableStringFieldUpdateOperationsInput
  activityOwnerEmail: NullableStringFieldUpdateOperationsInput
  activityOwnerName: NullableStringFieldUpdateOperationsInput
  caseName: NullableStringFieldUpdateOperationsInput
  contact: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  photoPaths: [String]
  secondaryContact: NullableStringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogUpdateInput {
  account: NullableStringFieldUpdateOperationsInput
  activityOwnerEmail: NullableStringFieldUpdateOperationsInput
  activityOwnerName: NullableStringFieldUpdateOperationsInput
  caseLogSubmission: CaseLogSubmissionUpdateManyWithoutCaseLogNestedInput
  caseName: NullableStringFieldUpdateOperationsInput
  contact: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  photoPaths: [String]
  secondaryContact: NullableStringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogUpdateManyMutationInput {
  account: NullableStringFieldUpdateOperationsInput
  activityOwnerEmail: NullableStringFieldUpdateOperationsInput
  activityOwnerName: NullableStringFieldUpdateOperationsInput
  caseName: NullableStringFieldUpdateOperationsInput
  contact: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  photoPaths: [String]
  secondaryContact: NullableStringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogUpdateOneWithoutCaseLogSubmissionNestedInput {
  connect: CaseLogWhereUniqueInput
  connectOrCreate: CaseLogCreateOrConnectWithoutCaseLogSubmissionInput
  create: CaseLogCreateWithoutCaseLogSubmissionInput
  delete: CaseLogWhereInput
  disconnect: CaseLogWhereInput
  update: CaseLogUpdateToOneWithWhereWithoutCaseLogSubmissionInput
  upsert: CaseLogUpsertWithoutCaseLogSubmissionInput
}

input CaseLogUpdateToOneWithWhereWithoutCaseLogSubmissionInput {
  data: CaseLogUpdateWithoutCaseLogSubmissionInput!
  where: CaseLogWhereInput
}

input CaseLogUpdateWithoutCaseLogSubmissionInput {
  account: NullableStringFieldUpdateOperationsInput
  activityOwnerEmail: NullableStringFieldUpdateOperationsInput
  activityOwnerName: NullableStringFieldUpdateOperationsInput
  caseName: NullableStringFieldUpdateOperationsInput
  contact: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  photoPaths: [String]
  secondaryContact: NullableStringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CaseLogUpdatephotoPathsInput {
  push: [String]
  set: [String]
}

input CaseLogUpsertWithoutCaseLogSubmissionInput {
  create: CaseLogCreateWithoutCaseLogSubmissionInput!
  update: CaseLogUpdateWithoutCaseLogSubmissionInput!
  where: CaseLogWhereInput
}

input CaseLogWhereInput {
  AND: [CaseLogWhereInput]
  NOT: [CaseLogWhereInput]
  OR: [CaseLogWhereInput]
  account: StringNullableFilter
  activityOwnerEmail: StringNullableFilter
  activityOwnerName: StringNullableFilter
  caseLogSubmission: CaseLogSubmissionListRelationFilter
  caseName: StringNullableFilter
  contact: StringNullableFilter
  createdAt: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  id: UuidFilter
  location: StringNullableFilter
  photoPaths: StringNullableListFilter
  secondaryContact: StringNullableFilter
  startDate: DateTimeNullableFilter
  status: StringNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CaseLogWhereUniqueInput {
  AND: [CaseLogWhereInput]
  NOT: [CaseLogWhereInput]
  OR: [CaseLogWhereInput]
  account: StringNullableFilter
  activityOwnerEmail: StringNullableFilter
  activityOwnerName: StringNullableFilter
  caseLogSubmission: CaseLogSubmissionListRelationFilter
  caseName: StringNullableFilter
  contact: StringNullableFilter
  createdAt: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  id: String
  location: StringNullableFilter
  photoPaths: StringNullableListFilter
  secondaryContact: StringNullableFilter
  startDate: DateTimeNullableFilter
  status: StringNullableFilter
  updatedAt: DateTimeNullableFilter
}

type Complaint {
  accName: String
  awareDate: DateTime
  complaintId: String
  complaintName: String
  complaintStatus: String
  complaintTitle: String
  country: String
  createdDate: DateTime
  division: String
  eventDate: DateTime
  id: String!
  procedureDate: DateTime
  procedureOutcome: String
  procedureType: String
  reasonsForUnsuccessfulProcedure: String
  salesRepEmail: String
  timeOfEvent: String
  treatedFor: String
  typeOfSituationReporting: String
}

type ComplaintCountAggregateOutputType {
  _all: Int!
  accName: Int!
  awareDate: Int!
  complaintId: Int!
  complaintName: Int!
  complaintStatus: Int!
  complaintTitle: Int!
  country: Int!
  createdDate: Int!
  division: Int!
  eventDate: Int!
  id: Int!
  procedureDate: Int!
  procedureOutcome: Int!
  procedureType: Int!
  reasonsForUnsuccessfulProcedure: Int!
  salesRepEmail: Int!
  timeOfEvent: Int!
  treatedFor: Int!
  typeOfSituationReporting: Int!
}

input ComplaintCountOrderByAggregateInput {
  accName: SortOrder
  awareDate: SortOrder
  complaintId: SortOrder
  complaintName: SortOrder
  complaintStatus: SortOrder
  complaintTitle: SortOrder
  country: SortOrder
  createdDate: SortOrder
  division: SortOrder
  eventDate: SortOrder
  id: SortOrder
  procedureDate: SortOrder
  procedureOutcome: SortOrder
  procedureType: SortOrder
  reasonsForUnsuccessfulProcedure: SortOrder
  salesRepEmail: SortOrder
  timeOfEvent: SortOrder
  treatedFor: SortOrder
  typeOfSituationReporting: SortOrder
}

input ComplaintCreateInput {
  accName: String
  awareDate: DateTime
  complaintId: String
  complaintName: String
  complaintStatus: String
  complaintTitle: String
  country: String
  createdDate: DateTime
  division: String
  eventDate: DateTime
  id: String
  procedureDate: DateTime
  procedureOutcome: String
  procedureType: String
  reasonsForUnsuccessfulProcedure: String
  salesRepEmail: String
  timeOfEvent: String
  treatedFor: String
  typeOfSituationReporting: String
}

input ComplaintCreateManyInput {
  accName: String
  awareDate: DateTime
  complaintId: String
  complaintName: String
  complaintStatus: String
  complaintTitle: String
  country: String
  createdDate: DateTime
  division: String
  eventDate: DateTime
  id: String
  procedureDate: DateTime
  procedureOutcome: String
  procedureType: String
  reasonsForUnsuccessfulProcedure: String
  salesRepEmail: String
  timeOfEvent: String
  treatedFor: String
  typeOfSituationReporting: String
}

type ComplaintMaxAggregateOutputType {
  accName: String
  awareDate: DateTime
  complaintId: String
  complaintName: String
  complaintStatus: String
  complaintTitle: String
  country: String
  createdDate: DateTime
  division: String
  eventDate: DateTime
  id: String
  procedureDate: DateTime
  procedureOutcome: String
  procedureType: String
  reasonsForUnsuccessfulProcedure: String
  salesRepEmail: String
  timeOfEvent: String
  treatedFor: String
  typeOfSituationReporting: String
}

input ComplaintMaxOrderByAggregateInput {
  accName: SortOrder
  awareDate: SortOrder
  complaintId: SortOrder
  complaintName: SortOrder
  complaintStatus: SortOrder
  complaintTitle: SortOrder
  country: SortOrder
  createdDate: SortOrder
  division: SortOrder
  eventDate: SortOrder
  id: SortOrder
  procedureDate: SortOrder
  procedureOutcome: SortOrder
  procedureType: SortOrder
  reasonsForUnsuccessfulProcedure: SortOrder
  salesRepEmail: SortOrder
  timeOfEvent: SortOrder
  treatedFor: SortOrder
  typeOfSituationReporting: SortOrder
}

type ComplaintMinAggregateOutputType {
  accName: String
  awareDate: DateTime
  complaintId: String
  complaintName: String
  complaintStatus: String
  complaintTitle: String
  country: String
  createdDate: DateTime
  division: String
  eventDate: DateTime
  id: String
  procedureDate: DateTime
  procedureOutcome: String
  procedureType: String
  reasonsForUnsuccessfulProcedure: String
  salesRepEmail: String
  timeOfEvent: String
  treatedFor: String
  typeOfSituationReporting: String
}

input ComplaintMinOrderByAggregateInput {
  accName: SortOrder
  awareDate: SortOrder
  complaintId: SortOrder
  complaintName: SortOrder
  complaintStatus: SortOrder
  complaintTitle: SortOrder
  country: SortOrder
  createdDate: SortOrder
  division: SortOrder
  eventDate: SortOrder
  id: SortOrder
  procedureDate: SortOrder
  procedureOutcome: SortOrder
  procedureType: SortOrder
  reasonsForUnsuccessfulProcedure: SortOrder
  salesRepEmail: SortOrder
  timeOfEvent: SortOrder
  treatedFor: SortOrder
  typeOfSituationReporting: SortOrder
}

input ComplaintOrderByWithAggregationInput {
  _count: ComplaintCountOrderByAggregateInput
  _max: ComplaintMaxOrderByAggregateInput
  _min: ComplaintMinOrderByAggregateInput
  accName: SortOrderInput
  awareDate: SortOrderInput
  complaintId: SortOrderInput
  complaintName: SortOrderInput
  complaintStatus: SortOrderInput
  complaintTitle: SortOrderInput
  country: SortOrderInput
  createdDate: SortOrderInput
  division: SortOrderInput
  eventDate: SortOrderInput
  id: SortOrder
  procedureDate: SortOrderInput
  procedureOutcome: SortOrderInput
  procedureType: SortOrderInput
  reasonsForUnsuccessfulProcedure: SortOrderInput
  salesRepEmail: SortOrderInput
  timeOfEvent: SortOrderInput
  treatedFor: SortOrderInput
  typeOfSituationReporting: SortOrderInput
}

input ComplaintOrderByWithRelationInput {
  accName: SortOrderInput
  awareDate: SortOrderInput
  complaintId: SortOrderInput
  complaintName: SortOrderInput
  complaintStatus: SortOrderInput
  complaintTitle: SortOrderInput
  country: SortOrderInput
  createdDate: SortOrderInput
  division: SortOrderInput
  eventDate: SortOrderInput
  id: SortOrder
  procedureDate: SortOrderInput
  procedureOutcome: SortOrderInput
  procedureType: SortOrderInput
  reasonsForUnsuccessfulProcedure: SortOrderInput
  salesRepEmail: SortOrderInput
  timeOfEvent: SortOrderInput
  treatedFor: SortOrderInput
  typeOfSituationReporting: SortOrderInput
}

enum ComplaintScalarFieldEnum {
  accName
  awareDate
  complaintId
  complaintName
  complaintStatus
  complaintTitle
  country
  createdDate
  division
  eventDate
  id
  procedureDate
  procedureOutcome
  procedureType
  reasonsForUnsuccessfulProcedure
  salesRepEmail
  timeOfEvent
  treatedFor
  typeOfSituationReporting
}

input ComplaintScalarWhereWithAggregatesInput {
  AND: [ComplaintScalarWhereWithAggregatesInput]
  NOT: [ComplaintScalarWhereWithAggregatesInput]
  OR: [ComplaintScalarWhereWithAggregatesInput]
  accName: StringNullableWithAggregatesFilter
  awareDate: DateTimeNullableWithAggregatesFilter
  complaintId: StringNullableWithAggregatesFilter
  complaintName: StringNullableWithAggregatesFilter
  complaintStatus: StringNullableWithAggregatesFilter
  complaintTitle: StringNullableWithAggregatesFilter
  country: StringNullableWithAggregatesFilter
  createdDate: DateTimeNullableWithAggregatesFilter
  division: StringNullableWithAggregatesFilter
  eventDate: DateTimeNullableWithAggregatesFilter
  id: UuidWithAggregatesFilter
  procedureDate: DateTimeNullableWithAggregatesFilter
  procedureOutcome: StringNullableWithAggregatesFilter
  procedureType: StringNullableWithAggregatesFilter
  reasonsForUnsuccessfulProcedure: StringNullableWithAggregatesFilter
  salesRepEmail: StringNullableWithAggregatesFilter
  timeOfEvent: StringNullableWithAggregatesFilter
  treatedFor: StringNullableWithAggregatesFilter
  typeOfSituationReporting: StringNullableWithAggregatesFilter
}

input ComplaintUncheckedCreateInput {
  accName: String
  awareDate: DateTime
  complaintId: String
  complaintName: String
  complaintStatus: String
  complaintTitle: String
  country: String
  createdDate: DateTime
  division: String
  eventDate: DateTime
  id: String
  procedureDate: DateTime
  procedureOutcome: String
  procedureType: String
  reasonsForUnsuccessfulProcedure: String
  salesRepEmail: String
  timeOfEvent: String
  treatedFor: String
  typeOfSituationReporting: String
}

input ComplaintUncheckedUpdateInput {
  accName: NullableStringFieldUpdateOperationsInput
  awareDate: NullableDateTimeFieldUpdateOperationsInput
  complaintId: NullableStringFieldUpdateOperationsInput
  complaintName: NullableStringFieldUpdateOperationsInput
  complaintStatus: NullableStringFieldUpdateOperationsInput
  complaintTitle: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdDate: NullableDateTimeFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  eventDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  procedureDate: NullableDateTimeFieldUpdateOperationsInput
  procedureOutcome: NullableStringFieldUpdateOperationsInput
  procedureType: NullableStringFieldUpdateOperationsInput
  reasonsForUnsuccessfulProcedure: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  timeOfEvent: NullableStringFieldUpdateOperationsInput
  treatedFor: NullableStringFieldUpdateOperationsInput
  typeOfSituationReporting: NullableStringFieldUpdateOperationsInput
}

input ComplaintUncheckedUpdateManyInput {
  accName: NullableStringFieldUpdateOperationsInput
  awareDate: NullableDateTimeFieldUpdateOperationsInput
  complaintId: NullableStringFieldUpdateOperationsInput
  complaintName: NullableStringFieldUpdateOperationsInput
  complaintStatus: NullableStringFieldUpdateOperationsInput
  complaintTitle: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdDate: NullableDateTimeFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  eventDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  procedureDate: NullableDateTimeFieldUpdateOperationsInput
  procedureOutcome: NullableStringFieldUpdateOperationsInput
  procedureType: NullableStringFieldUpdateOperationsInput
  reasonsForUnsuccessfulProcedure: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  timeOfEvent: NullableStringFieldUpdateOperationsInput
  treatedFor: NullableStringFieldUpdateOperationsInput
  typeOfSituationReporting: NullableStringFieldUpdateOperationsInput
}

input ComplaintUpdateInput {
  accName: NullableStringFieldUpdateOperationsInput
  awareDate: NullableDateTimeFieldUpdateOperationsInput
  complaintId: NullableStringFieldUpdateOperationsInput
  complaintName: NullableStringFieldUpdateOperationsInput
  complaintStatus: NullableStringFieldUpdateOperationsInput
  complaintTitle: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdDate: NullableDateTimeFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  eventDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  procedureDate: NullableDateTimeFieldUpdateOperationsInput
  procedureOutcome: NullableStringFieldUpdateOperationsInput
  procedureType: NullableStringFieldUpdateOperationsInput
  reasonsForUnsuccessfulProcedure: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  timeOfEvent: NullableStringFieldUpdateOperationsInput
  treatedFor: NullableStringFieldUpdateOperationsInput
  typeOfSituationReporting: NullableStringFieldUpdateOperationsInput
}

input ComplaintUpdateManyMutationInput {
  accName: NullableStringFieldUpdateOperationsInput
  awareDate: NullableDateTimeFieldUpdateOperationsInput
  complaintId: NullableStringFieldUpdateOperationsInput
  complaintName: NullableStringFieldUpdateOperationsInput
  complaintStatus: NullableStringFieldUpdateOperationsInput
  complaintTitle: NullableStringFieldUpdateOperationsInput
  country: NullableStringFieldUpdateOperationsInput
  createdDate: NullableDateTimeFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  eventDate: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  procedureDate: NullableDateTimeFieldUpdateOperationsInput
  procedureOutcome: NullableStringFieldUpdateOperationsInput
  procedureType: NullableStringFieldUpdateOperationsInput
  reasonsForUnsuccessfulProcedure: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  timeOfEvent: NullableStringFieldUpdateOperationsInput
  treatedFor: NullableStringFieldUpdateOperationsInput
  typeOfSituationReporting: NullableStringFieldUpdateOperationsInput
}

input ComplaintWhereInput {
  AND: [ComplaintWhereInput]
  NOT: [ComplaintWhereInput]
  OR: [ComplaintWhereInput]
  accName: StringNullableFilter
  awareDate: DateTimeNullableFilter
  complaintId: StringNullableFilter
  complaintName: StringNullableFilter
  complaintStatus: StringNullableFilter
  complaintTitle: StringNullableFilter
  country: StringNullableFilter
  createdDate: DateTimeNullableFilter
  division: StringNullableFilter
  eventDate: DateTimeNullableFilter
  id: UuidFilter
  procedureDate: DateTimeNullableFilter
  procedureOutcome: StringNullableFilter
  procedureType: StringNullableFilter
  reasonsForUnsuccessfulProcedure: StringNullableFilter
  salesRepEmail: StringNullableFilter
  timeOfEvent: StringNullableFilter
  treatedFor: StringNullableFilter
  typeOfSituationReporting: StringNullableFilter
}

input ComplaintWhereUniqueInput {
  AND: [ComplaintWhereInput]
  NOT: [ComplaintWhereInput]
  OR: [ComplaintWhereInput]
  accName: StringNullableFilter
  awareDate: DateTimeNullableFilter
  complaintId: StringNullableFilter
  complaintName: StringNullableFilter
  complaintStatus: StringNullableFilter
  complaintTitle: StringNullableFilter
  country: StringNullableFilter
  createdDate: DateTimeNullableFilter
  division: StringNullableFilter
  eventDate: DateTimeNullableFilter
  id: String
  procedureDate: DateTimeNullableFilter
  procedureOutcome: StringNullableFilter
  procedureType: StringNullableFilter
  reasonsForUnsuccessfulProcedure: StringNullableFilter
  salesRepEmail: StringNullableFilter
  timeOfEvent: StringNullableFilter
  treatedFor: StringNullableFilter
  typeOfSituationReporting: StringNullableFilter
}

type ContactSearch {
  contactId: String
  createdAt: DateTime
  doctorAlternativeEmail: String
  doctorCountry: String
  doctorDivision: String
  doctorEmail: String
  doctorName: String
  doctorPhone: String
  doctorProfilePhoto: String
  doctorSalutation: String
  doctorSpecialty: String
  doctorTitle: String
  hospital: String
  id: Int!
  salesRepEmail: String
  topicsOfInterest: String
  updatedAt: DateTime
}

type ContactSearchAvgAggregateOutputType {
  id: Float
}

input ContactSearchAvgOrderByAggregateInput {
  id: SortOrder
}

type ContactSearchCountAggregateOutputType {
  _all: Int!
  contactId: Int!
  createdAt: Int!
  doctorAlternativeEmail: Int!
  doctorCountry: Int!
  doctorDivision: Int!
  doctorEmail: Int!
  doctorName: Int!
  doctorPhone: Int!
  doctorProfilePhoto: Int!
  doctorSalutation: Int!
  doctorSpecialty: Int!
  doctorTitle: Int!
  hospital: Int!
  id: Int!
  salesRepEmail: Int!
  topicsOfInterest: Int!
  updatedAt: Int!
}

input ContactSearchCountOrderByAggregateInput {
  contactId: SortOrder
  createdAt: SortOrder
  doctorAlternativeEmail: SortOrder
  doctorCountry: SortOrder
  doctorDivision: SortOrder
  doctorEmail: SortOrder
  doctorName: SortOrder
  doctorPhone: SortOrder
  doctorProfilePhoto: SortOrder
  doctorSalutation: SortOrder
  doctorSpecialty: SortOrder
  doctorTitle: SortOrder
  hospital: SortOrder
  id: SortOrder
  salesRepEmail: SortOrder
  topicsOfInterest: SortOrder
  updatedAt: SortOrder
}

input ContactSearchCreateInput {
  contactId: String
  createdAt: DateTime
  doctorAlternativeEmail: String
  doctorCountry: String
  doctorDivision: String
  doctorEmail: String
  doctorName: String
  doctorPhone: String
  doctorProfilePhoto: String
  doctorSalutation: String
  doctorSpecialty: String
  doctorTitle: String
  hospital: String
  salesRepEmail: String
  topicsOfInterest: String
  updatedAt: DateTime
}

input ContactSearchCreateManyInput {
  contactId: String
  createdAt: DateTime
  doctorAlternativeEmail: String
  doctorCountry: String
  doctorDivision: String
  doctorEmail: String
  doctorName: String
  doctorPhone: String
  doctorProfilePhoto: String
  doctorSalutation: String
  doctorSpecialty: String
  doctorTitle: String
  hospital: String
  id: Int
  salesRepEmail: String
  topicsOfInterest: String
  updatedAt: DateTime
}

type ContactSearchMaxAggregateOutputType {
  contactId: String
  createdAt: DateTime
  doctorAlternativeEmail: String
  doctorCountry: String
  doctorDivision: String
  doctorEmail: String
  doctorName: String
  doctorPhone: String
  doctorProfilePhoto: String
  doctorSalutation: String
  doctorSpecialty: String
  doctorTitle: String
  hospital: String
  id: Int
  salesRepEmail: String
  topicsOfInterest: String
  updatedAt: DateTime
}

input ContactSearchMaxOrderByAggregateInput {
  contactId: SortOrder
  createdAt: SortOrder
  doctorAlternativeEmail: SortOrder
  doctorCountry: SortOrder
  doctorDivision: SortOrder
  doctorEmail: SortOrder
  doctorName: SortOrder
  doctorPhone: SortOrder
  doctorProfilePhoto: SortOrder
  doctorSalutation: SortOrder
  doctorSpecialty: SortOrder
  doctorTitle: SortOrder
  hospital: SortOrder
  id: SortOrder
  salesRepEmail: SortOrder
  topicsOfInterest: SortOrder
  updatedAt: SortOrder
}

type ContactSearchMinAggregateOutputType {
  contactId: String
  createdAt: DateTime
  doctorAlternativeEmail: String
  doctorCountry: String
  doctorDivision: String
  doctorEmail: String
  doctorName: String
  doctorPhone: String
  doctorProfilePhoto: String
  doctorSalutation: String
  doctorSpecialty: String
  doctorTitle: String
  hospital: String
  id: Int
  salesRepEmail: String
  topicsOfInterest: String
  updatedAt: DateTime
}

input ContactSearchMinOrderByAggregateInput {
  contactId: SortOrder
  createdAt: SortOrder
  doctorAlternativeEmail: SortOrder
  doctorCountry: SortOrder
  doctorDivision: SortOrder
  doctorEmail: SortOrder
  doctorName: SortOrder
  doctorPhone: SortOrder
  doctorProfilePhoto: SortOrder
  doctorSalutation: SortOrder
  doctorSpecialty: SortOrder
  doctorTitle: SortOrder
  hospital: SortOrder
  id: SortOrder
  salesRepEmail: SortOrder
  topicsOfInterest: SortOrder
  updatedAt: SortOrder
}

input ContactSearchOrderByWithAggregationInput {
  _avg: ContactSearchAvgOrderByAggregateInput
  _count: ContactSearchCountOrderByAggregateInput
  _max: ContactSearchMaxOrderByAggregateInput
  _min: ContactSearchMinOrderByAggregateInput
  _sum: ContactSearchSumOrderByAggregateInput
  contactId: SortOrderInput
  createdAt: SortOrderInput
  doctorAlternativeEmail: SortOrderInput
  doctorCountry: SortOrderInput
  doctorDivision: SortOrderInput
  doctorEmail: SortOrderInput
  doctorName: SortOrderInput
  doctorPhone: SortOrderInput
  doctorProfilePhoto: SortOrderInput
  doctorSalutation: SortOrderInput
  doctorSpecialty: SortOrderInput
  doctorTitle: SortOrderInput
  hospital: SortOrderInput
  id: SortOrder
  salesRepEmail: SortOrderInput
  topicsOfInterest: SortOrderInput
  updatedAt: SortOrderInput
}

input ContactSearchOrderByWithRelationInput {
  contactId: SortOrderInput
  createdAt: SortOrderInput
  doctorAlternativeEmail: SortOrderInput
  doctorCountry: SortOrderInput
  doctorDivision: SortOrderInput
  doctorEmail: SortOrderInput
  doctorName: SortOrderInput
  doctorPhone: SortOrderInput
  doctorProfilePhoto: SortOrderInput
  doctorSalutation: SortOrderInput
  doctorSpecialty: SortOrderInput
  doctorTitle: SortOrderInput
  hospital: SortOrderInput
  id: SortOrder
  salesRepEmail: SortOrderInput
  topicsOfInterest: SortOrderInput
  updatedAt: SortOrderInput
}

enum ContactSearchScalarFieldEnum {
  contactId
  createdAt
  doctorAlternativeEmail
  doctorCountry
  doctorDivision
  doctorEmail
  doctorName
  doctorPhone
  doctorProfilePhoto
  doctorSalutation
  doctorSpecialty
  doctorTitle
  hospital
  id
  salesRepEmail
  topicsOfInterest
  updatedAt
}

input ContactSearchScalarWhereWithAggregatesInput {
  AND: [ContactSearchScalarWhereWithAggregatesInput]
  NOT: [ContactSearchScalarWhereWithAggregatesInput]
  OR: [ContactSearchScalarWhereWithAggregatesInput]
  contactId: StringNullableWithAggregatesFilter
  createdAt: DateTimeNullableWithAggregatesFilter
  doctorAlternativeEmail: StringNullableWithAggregatesFilter
  doctorCountry: StringNullableWithAggregatesFilter
  doctorDivision: StringNullableWithAggregatesFilter
  doctorEmail: StringNullableWithAggregatesFilter
  doctorName: StringNullableWithAggregatesFilter
  doctorPhone: StringNullableWithAggregatesFilter
  doctorProfilePhoto: StringNullableWithAggregatesFilter
  doctorSalutation: StringNullableWithAggregatesFilter
  doctorSpecialty: StringNullableWithAggregatesFilter
  doctorTitle: StringNullableWithAggregatesFilter
  hospital: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  salesRepEmail: StringNullableWithAggregatesFilter
  topicsOfInterest: StringNullableWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

type ContactSearchSumAggregateOutputType {
  id: Int
}

input ContactSearchSumOrderByAggregateInput {
  id: SortOrder
}

input ContactSearchUncheckedCreateInput {
  contactId: String
  createdAt: DateTime
  doctorAlternativeEmail: String
  doctorCountry: String
  doctorDivision: String
  doctorEmail: String
  doctorName: String
  doctorPhone: String
  doctorProfilePhoto: String
  doctorSalutation: String
  doctorSpecialty: String
  doctorTitle: String
  hospital: String
  id: Int
  salesRepEmail: String
  topicsOfInterest: String
  updatedAt: DateTime
}

input ContactSearchUncheckedUpdateInput {
  contactId: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  doctorAlternativeEmail: NullableStringFieldUpdateOperationsInput
  doctorCountry: NullableStringFieldUpdateOperationsInput
  doctorDivision: NullableStringFieldUpdateOperationsInput
  doctorEmail: NullableStringFieldUpdateOperationsInput
  doctorName: NullableStringFieldUpdateOperationsInput
  doctorPhone: NullableStringFieldUpdateOperationsInput
  doctorProfilePhoto: NullableStringFieldUpdateOperationsInput
  doctorSalutation: NullableStringFieldUpdateOperationsInput
  doctorSpecialty: NullableStringFieldUpdateOperationsInput
  doctorTitle: NullableStringFieldUpdateOperationsInput
  hospital: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  topicsOfInterest: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ContactSearchUncheckedUpdateManyInput {
  contactId: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  doctorAlternativeEmail: NullableStringFieldUpdateOperationsInput
  doctorCountry: NullableStringFieldUpdateOperationsInput
  doctorDivision: NullableStringFieldUpdateOperationsInput
  doctorEmail: NullableStringFieldUpdateOperationsInput
  doctorName: NullableStringFieldUpdateOperationsInput
  doctorPhone: NullableStringFieldUpdateOperationsInput
  doctorProfilePhoto: NullableStringFieldUpdateOperationsInput
  doctorSalutation: NullableStringFieldUpdateOperationsInput
  doctorSpecialty: NullableStringFieldUpdateOperationsInput
  doctorTitle: NullableStringFieldUpdateOperationsInput
  hospital: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  topicsOfInterest: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ContactSearchUpdateInput {
  contactId: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  doctorAlternativeEmail: NullableStringFieldUpdateOperationsInput
  doctorCountry: NullableStringFieldUpdateOperationsInput
  doctorDivision: NullableStringFieldUpdateOperationsInput
  doctorEmail: NullableStringFieldUpdateOperationsInput
  doctorName: NullableStringFieldUpdateOperationsInput
  doctorPhone: NullableStringFieldUpdateOperationsInput
  doctorProfilePhoto: NullableStringFieldUpdateOperationsInput
  doctorSalutation: NullableStringFieldUpdateOperationsInput
  doctorSpecialty: NullableStringFieldUpdateOperationsInput
  doctorTitle: NullableStringFieldUpdateOperationsInput
  hospital: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  topicsOfInterest: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ContactSearchUpdateManyMutationInput {
  contactId: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  doctorAlternativeEmail: NullableStringFieldUpdateOperationsInput
  doctorCountry: NullableStringFieldUpdateOperationsInput
  doctorDivision: NullableStringFieldUpdateOperationsInput
  doctorEmail: NullableStringFieldUpdateOperationsInput
  doctorName: NullableStringFieldUpdateOperationsInput
  doctorPhone: NullableStringFieldUpdateOperationsInput
  doctorProfilePhoto: NullableStringFieldUpdateOperationsInput
  doctorSalutation: NullableStringFieldUpdateOperationsInput
  doctorSpecialty: NullableStringFieldUpdateOperationsInput
  doctorTitle: NullableStringFieldUpdateOperationsInput
  hospital: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  topicsOfInterest: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input ContactSearchWhereInput {
  AND: [ContactSearchWhereInput]
  NOT: [ContactSearchWhereInput]
  OR: [ContactSearchWhereInput]
  contactId: StringNullableFilter
  createdAt: DateTimeNullableFilter
  doctorAlternativeEmail: StringNullableFilter
  doctorCountry: StringNullableFilter
  doctorDivision: StringNullableFilter
  doctorEmail: StringNullableFilter
  doctorName: StringNullableFilter
  doctorPhone: StringNullableFilter
  doctorProfilePhoto: StringNullableFilter
  doctorSalutation: StringNullableFilter
  doctorSpecialty: StringNullableFilter
  doctorTitle: StringNullableFilter
  hospital: StringNullableFilter
  id: IntFilter
  salesRepEmail: StringNullableFilter
  topicsOfInterest: StringNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ContactSearchWhereUniqueInput {
  AND: [ContactSearchWhereInput]
  NOT: [ContactSearchWhereInput]
  OR: [ContactSearchWhereInput]
  contactId: StringNullableFilter
  createdAt: DateTimeNullableFilter
  doctorAlternativeEmail: StringNullableFilter
  doctorCountry: StringNullableFilter
  doctorDivision: StringNullableFilter
  doctorEmail: StringNullableFilter
  doctorName: StringNullableFilter
  doctorPhone: StringNullableFilter
  doctorProfilePhoto: StringNullableFilter
  doctorSalutation: StringNullableFilter
  doctorSpecialty: StringNullableFilter
  doctorTitle: StringNullableFilter
  hospital: StringNullableFilter
  id: Int
  salesRepEmail: StringNullableFilter
  topicsOfInterest: StringNullableFilter
  updatedAt: DateTimeNullableFilter
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime]
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

type Enum {
  fields: [String!]!
  name: String!
}

input EnumSearchTypeNullableListFilter {
  equals: [SearchType]
  has: SearchType
  hasEvery: [SearchType]
  hasSome: [SearchType]
  isEmpty: Boolean
}

input EnummobileSalesTargetTypeFieldUpdateOperationsInput {
  set: mobileSalesTargetType
}

input EnummobileSalesTargetTypeFilter {
  equals: mobileSalesTargetType
  in: [mobileSalesTargetType]
  not: NestedEnummobileSalesTargetTypeFilter
  notIn: [mobileSalesTargetType]
}

input EnummobileSalesTargetTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnummobileSalesTargetTypeFilter
  _min: NestedEnummobileSalesTargetTypeFilter
  equals: mobileSalesTargetType
  in: [mobileSalesTargetType]
  not: NestedEnummobileSalesTargetTypeWithAggregatesFilter
  notIn: [mobileSalesTargetType]
}

type Field {
  create: Boolean!
  editor: Boolean!
  filter: Boolean!
  id: String!
  isId: Boolean!
  kind: KindEnum!
  list: Boolean!
  name: String!
  order: Int!
  read: Boolean!
  relationField: Boolean
  required: Boolean!
  sort: Boolean!
  title: String!
  type: String!
  unique: Boolean!
  update: Boolean!
  upload: Boolean!
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JsonNullableListFilter {
  equals: [Json]
  has: Json
  hasEvery: [Json]
  hasSome: [Json]
  isEmpty: Boolean
}

enum KindEnum {
  enum
  object
  scalar
}

type Leaderboard {
  country: String
  fullName: String
  id: String!
  lastRefreshedTimestamp: DateTime
  month: String
  quarter: String
  rankMtd: String
  rankQtd: String
  rankYtd: String
  salesRepEmail: String
  targetAchievedMtd: String
  targetAchievedQtd: String
  targetAchievedYtd: String
  year: String
}

type LeaderboardCountAggregateOutputType {
  _all: Int!
  country: Int!
  fullName: Int!
  id: Int!
  lastRefreshedTimestamp: Int!
  month: Int!
  quarter: Int!
  rankMtd: Int!
  rankQtd: Int!
  rankYtd: Int!
  salesRepEmail: Int!
  targetAchievedMtd: Int!
  targetAchievedQtd: Int!
  targetAchievedYtd: Int!
  year: Int!
}

input LeaderboardCountOrderByAggregateInput {
  country: SortOrder
  fullName: SortOrder
  id: SortOrder
  lastRefreshedTimestamp: SortOrder
  month: SortOrder
  quarter: SortOrder
  rankMtd: SortOrder
  rankQtd: SortOrder
  rankYtd: SortOrder
  salesRepEmail: SortOrder
  targetAchievedMtd: SortOrder
  targetAchievedQtd: SortOrder
  targetAchievedYtd: SortOrder
  year: SortOrder
}

input LeaderboardCreateInput {
  country: String
  fullName: String
  id: String
  lastRefreshedTimestamp: DateTime
  month: String
  quarter: String
  rankMtd: String
  rankQtd: String
  rankYtd: String
  salesRepEmail: String
  targetAchievedMtd: String
  targetAchievedQtd: String
  targetAchievedYtd: String
  year: String
}

input LeaderboardCreateManyInput {
  country: String
  fullName: String
  id: String
  lastRefreshedTimestamp: DateTime
  month: String
  quarter: String
  rankMtd: String
  rankQtd: String
  rankYtd: String
  salesRepEmail: String
  targetAchievedMtd: String
  targetAchievedQtd: String
  targetAchievedYtd: String
  year: String
}

type LeaderboardMaxAggregateOutputType {
  country: String
  fullName: String
  id: String
  lastRefreshedTimestamp: DateTime
  month: String
  quarter: String
  rankMtd: String
  rankQtd: String
  rankYtd: String
  salesRepEmail: String
  targetAchievedMtd: String
  targetAchievedQtd: String
  targetAchievedYtd: String
  year: String
}

input LeaderboardMaxOrderByAggregateInput {
  country: SortOrder
  fullName: SortOrder
  id: SortOrder
  lastRefreshedTimestamp: SortOrder
  month: SortOrder
  quarter: SortOrder
  rankMtd: SortOrder
  rankQtd: SortOrder
  rankYtd: SortOrder
  salesRepEmail: SortOrder
  targetAchievedMtd: SortOrder
  targetAchievedQtd: SortOrder
  targetAchievedYtd: SortOrder
  year: SortOrder
}

type LeaderboardMinAggregateOutputType {
  country: String
  fullName: String
  id: String
  lastRefreshedTimestamp: DateTime
  month: String
  quarter: String
  rankMtd: String
  rankQtd: String
  rankYtd: String
  salesRepEmail: String
  targetAchievedMtd: String
  targetAchievedQtd: String
  targetAchievedYtd: String
  year: String
}

input LeaderboardMinOrderByAggregateInput {
  country: SortOrder
  fullName: SortOrder
  id: SortOrder
  lastRefreshedTimestamp: SortOrder
  month: SortOrder
  quarter: SortOrder
  rankMtd: SortOrder
  rankQtd: SortOrder
  rankYtd: SortOrder
  salesRepEmail: SortOrder
  targetAchievedMtd: SortOrder
  targetAchievedQtd: SortOrder
  targetAchievedYtd: SortOrder
  year: SortOrder
}

input LeaderboardOrderByWithAggregationInput {
  _count: LeaderboardCountOrderByAggregateInput
  _max: LeaderboardMaxOrderByAggregateInput
  _min: LeaderboardMinOrderByAggregateInput
  country: SortOrderInput
  fullName: SortOrderInput
  id: SortOrder
  lastRefreshedTimestamp: SortOrderInput
  month: SortOrderInput
  quarter: SortOrderInput
  rankMtd: SortOrderInput
  rankQtd: SortOrderInput
  rankYtd: SortOrderInput
  salesRepEmail: SortOrderInput
  targetAchievedMtd: SortOrderInput
  targetAchievedQtd: SortOrderInput
  targetAchievedYtd: SortOrderInput
  year: SortOrderInput
}

input LeaderboardOrderByWithRelationInput {
  country: SortOrderInput
  fullName: SortOrderInput
  id: SortOrder
  lastRefreshedTimestamp: SortOrderInput
  month: SortOrderInput
  quarter: SortOrderInput
  rankMtd: SortOrderInput
  rankQtd: SortOrderInput
  rankYtd: SortOrderInput
  salesRepEmail: SortOrderInput
  targetAchievedMtd: SortOrderInput
  targetAchievedQtd: SortOrderInput
  targetAchievedYtd: SortOrderInput
  year: SortOrderInput
}

enum LeaderboardScalarFieldEnum {
  country
  fullName
  id
  lastRefreshedTimestamp
  month
  quarter
  rankMtd
  rankQtd
  rankYtd
  salesRepEmail
  targetAchievedMtd
  targetAchievedQtd
  targetAchievedYtd
  year
}

input LeaderboardScalarWhereWithAggregatesInput {
  AND: [LeaderboardScalarWhereWithAggregatesInput]
  NOT: [LeaderboardScalarWhereWithAggregatesInput]
  OR: [LeaderboardScalarWhereWithAggregatesInput]
  country: StringNullableWithAggregatesFilter
  fullName: StringNullableWithAggregatesFilter
  id: UuidWithAggregatesFilter
  lastRefreshedTimestamp: DateTimeNullableWithAggregatesFilter
  month: StringNullableWithAggregatesFilter
  quarter: StringNullableWithAggregatesFilter
  rankMtd: StringNullableWithAggregatesFilter
  rankQtd: StringNullableWithAggregatesFilter
  rankYtd: StringNullableWithAggregatesFilter
  salesRepEmail: StringNullableWithAggregatesFilter
  targetAchievedMtd: StringNullableWithAggregatesFilter
  targetAchievedQtd: StringNullableWithAggregatesFilter
  targetAchievedYtd: StringNullableWithAggregatesFilter
  year: StringNullableWithAggregatesFilter
}

input LeaderboardUncheckedCreateInput {
  country: String
  fullName: String
  id: String
  lastRefreshedTimestamp: DateTime
  month: String
  quarter: String
  rankMtd: String
  rankQtd: String
  rankYtd: String
  salesRepEmail: String
  targetAchievedMtd: String
  targetAchievedQtd: String
  targetAchievedYtd: String
  year: String
}

input LeaderboardUncheckedUpdateInput {
  country: NullableStringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastRefreshedTimestamp: NullableDateTimeFieldUpdateOperationsInput
  month: NullableStringFieldUpdateOperationsInput
  quarter: NullableStringFieldUpdateOperationsInput
  rankMtd: NullableStringFieldUpdateOperationsInput
  rankQtd: NullableStringFieldUpdateOperationsInput
  rankYtd: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  targetAchievedMtd: NullableStringFieldUpdateOperationsInput
  targetAchievedQtd: NullableStringFieldUpdateOperationsInput
  targetAchievedYtd: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input LeaderboardUncheckedUpdateManyInput {
  country: NullableStringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastRefreshedTimestamp: NullableDateTimeFieldUpdateOperationsInput
  month: NullableStringFieldUpdateOperationsInput
  quarter: NullableStringFieldUpdateOperationsInput
  rankMtd: NullableStringFieldUpdateOperationsInput
  rankQtd: NullableStringFieldUpdateOperationsInput
  rankYtd: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  targetAchievedMtd: NullableStringFieldUpdateOperationsInput
  targetAchievedQtd: NullableStringFieldUpdateOperationsInput
  targetAchievedYtd: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input LeaderboardUpdateInput {
  country: NullableStringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastRefreshedTimestamp: NullableDateTimeFieldUpdateOperationsInput
  month: NullableStringFieldUpdateOperationsInput
  quarter: NullableStringFieldUpdateOperationsInput
  rankMtd: NullableStringFieldUpdateOperationsInput
  rankQtd: NullableStringFieldUpdateOperationsInput
  rankYtd: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  targetAchievedMtd: NullableStringFieldUpdateOperationsInput
  targetAchievedQtd: NullableStringFieldUpdateOperationsInput
  targetAchievedYtd: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input LeaderboardUpdateManyMutationInput {
  country: NullableStringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  lastRefreshedTimestamp: NullableDateTimeFieldUpdateOperationsInput
  month: NullableStringFieldUpdateOperationsInput
  quarter: NullableStringFieldUpdateOperationsInput
  rankMtd: NullableStringFieldUpdateOperationsInput
  rankQtd: NullableStringFieldUpdateOperationsInput
  rankYtd: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  targetAchievedMtd: NullableStringFieldUpdateOperationsInput
  targetAchievedQtd: NullableStringFieldUpdateOperationsInput
  targetAchievedYtd: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input LeaderboardWhereInput {
  AND: [LeaderboardWhereInput]
  NOT: [LeaderboardWhereInput]
  OR: [LeaderboardWhereInput]
  country: StringNullableFilter
  fullName: StringNullableFilter
  id: UuidFilter
  lastRefreshedTimestamp: DateTimeNullableFilter
  month: StringNullableFilter
  quarter: StringNullableFilter
  rankMtd: StringNullableFilter
  rankQtd: StringNullableFilter
  rankYtd: StringNullableFilter
  salesRepEmail: StringNullableFilter
  targetAchievedMtd: StringNullableFilter
  targetAchievedQtd: StringNullableFilter
  targetAchievedYtd: StringNullableFilter
  year: StringNullableFilter
}

input LeaderboardWhereUniqueInput {
  AND: [LeaderboardWhereInput]
  NOT: [LeaderboardWhereInput]
  OR: [LeaderboardWhereInput]
  country: StringNullableFilter
  fullName: StringNullableFilter
  id: String
  lastRefreshedTimestamp: DateTimeNullableFilter
  month: StringNullableFilter
  quarter: StringNullableFilter
  rankMtd: StringNullableFilter
  rankQtd: StringNullableFilter
  rankYtd: StringNullableFilter
  salesRepEmail: StringNullableFilter
  targetAchievedMtd: StringNullableFilter
  targetAchievedQtd: StringNullableFilter
  targetAchievedYtd: StringNullableFilter
  year: StringNullableFilter
}

type Mobile_Sales {
  id: Int!
  quarter: String
  salesRepEmail: String
  targetByQuarter: String
  targetByYear: String
  type: mobileSalesTargetType!
  year: String
}

type Mobile_SalesAvgAggregateOutputType {
  id: Float
}

input Mobile_SalesAvgOrderByAggregateInput {
  id: SortOrder
}

type Mobile_SalesCountAggregateOutputType {
  _all: Int!
  id: Int!
  quarter: Int!
  salesRepEmail: Int!
  targetByQuarter: Int!
  targetByYear: Int!
  type: Int!
  year: Int!
}

input Mobile_SalesCountOrderByAggregateInput {
  id: SortOrder
  quarter: SortOrder
  salesRepEmail: SortOrder
  targetByQuarter: SortOrder
  targetByYear: SortOrder
  type: SortOrder
  year: SortOrder
}

input Mobile_SalesCreateInput {
  quarter: String
  salesRepEmail: String
  targetByQuarter: String
  targetByYear: String
  type: mobileSalesTargetType
  year: String
}

input Mobile_SalesCreateManyInput {
  id: Int
  quarter: String
  salesRepEmail: String
  targetByQuarter: String
  targetByYear: String
  type: mobileSalesTargetType
  year: String
}

type Mobile_SalesMaxAggregateOutputType {
  id: Int
  quarter: String
  salesRepEmail: String
  targetByQuarter: String
  targetByYear: String
  type: mobileSalesTargetType
  year: String
}

input Mobile_SalesMaxOrderByAggregateInput {
  id: SortOrder
  quarter: SortOrder
  salesRepEmail: SortOrder
  targetByQuarter: SortOrder
  targetByYear: SortOrder
  type: SortOrder
  year: SortOrder
}

type Mobile_SalesMinAggregateOutputType {
  id: Int
  quarter: String
  salesRepEmail: String
  targetByQuarter: String
  targetByYear: String
  type: mobileSalesTargetType
  year: String
}

input Mobile_SalesMinOrderByAggregateInput {
  id: SortOrder
  quarter: SortOrder
  salesRepEmail: SortOrder
  targetByQuarter: SortOrder
  targetByYear: SortOrder
  type: SortOrder
  year: SortOrder
}

input Mobile_SalesOrderByWithAggregationInput {
  _avg: Mobile_SalesAvgOrderByAggregateInput
  _count: Mobile_SalesCountOrderByAggregateInput
  _max: Mobile_SalesMaxOrderByAggregateInput
  _min: Mobile_SalesMinOrderByAggregateInput
  _sum: Mobile_SalesSumOrderByAggregateInput
  id: SortOrder
  quarter: SortOrderInput
  salesRepEmail: SortOrderInput
  targetByQuarter: SortOrderInput
  targetByYear: SortOrderInput
  type: SortOrder
  year: SortOrderInput
}

input Mobile_SalesOrderByWithRelationInput {
  id: SortOrder
  quarter: SortOrderInput
  salesRepEmail: SortOrderInput
  targetByQuarter: SortOrderInput
  targetByYear: SortOrderInput
  type: SortOrder
  year: SortOrderInput
}

enum Mobile_SalesScalarFieldEnum {
  id
  quarter
  salesRepEmail
  targetByQuarter
  targetByYear
  type
  year
}

input Mobile_SalesScalarWhereWithAggregatesInput {
  AND: [Mobile_SalesScalarWhereWithAggregatesInput]
  NOT: [Mobile_SalesScalarWhereWithAggregatesInput]
  OR: [Mobile_SalesScalarWhereWithAggregatesInput]
  id: IntWithAggregatesFilter
  quarter: StringNullableWithAggregatesFilter
  salesRepEmail: StringNullableWithAggregatesFilter
  targetByQuarter: StringNullableWithAggregatesFilter
  targetByYear: StringNullableWithAggregatesFilter
  type: EnummobileSalesTargetTypeWithAggregatesFilter
  year: StringNullableWithAggregatesFilter
}

type Mobile_SalesSumAggregateOutputType {
  id: Int
}

input Mobile_SalesSumOrderByAggregateInput {
  id: SortOrder
}

input Mobile_SalesUncheckedCreateInput {
  id: Int
  quarter: String
  salesRepEmail: String
  targetByQuarter: String
  targetByYear: String
  type: mobileSalesTargetType
  year: String
}

input Mobile_SalesUncheckedUpdateInput {
  id: IntFieldUpdateOperationsInput
  quarter: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  targetByQuarter: NullableStringFieldUpdateOperationsInput
  targetByYear: NullableStringFieldUpdateOperationsInput
  type: EnummobileSalesTargetTypeFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input Mobile_SalesUncheckedUpdateManyInput {
  id: IntFieldUpdateOperationsInput
  quarter: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  targetByQuarter: NullableStringFieldUpdateOperationsInput
  targetByYear: NullableStringFieldUpdateOperationsInput
  type: EnummobileSalesTargetTypeFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input Mobile_SalesUpdateInput {
  quarter: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  targetByQuarter: NullableStringFieldUpdateOperationsInput
  targetByYear: NullableStringFieldUpdateOperationsInput
  type: EnummobileSalesTargetTypeFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input Mobile_SalesUpdateManyMutationInput {
  quarter: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  targetByQuarter: NullableStringFieldUpdateOperationsInput
  targetByYear: NullableStringFieldUpdateOperationsInput
  type: EnummobileSalesTargetTypeFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input Mobile_SalesWhereInput {
  AND: [Mobile_SalesWhereInput]
  NOT: [Mobile_SalesWhereInput]
  OR: [Mobile_SalesWhereInput]
  id: IntFilter
  quarter: StringNullableFilter
  salesRepEmail: StringNullableFilter
  targetByQuarter: StringNullableFilter
  targetByYear: StringNullableFilter
  type: EnummobileSalesTargetTypeFilter
  year: StringNullableFilter
}

input Mobile_SalesWhereUniqueInput {
  AND: [Mobile_SalesWhereInput]
  NOT: [Mobile_SalesWhereInput]
  OR: [Mobile_SalesWhereInput]
  id: Int
  quarter: StringNullableFilter
  salesRepEmail: StringNullableFilter
  targetByQuarter: StringNullableFilter
  targetByYear: StringNullableFilter
  type: EnummobileSalesTargetTypeFilter
  year: StringNullableFilter
}

type Model {
  create: Boolean!
  delete: Boolean!
  displayFields: [String!]!
  fields: [Field!]!
  id: String!
  idField: String!
  name: String!
  update: Boolean!
}

type Mutation {
  createOneCaseLog(data: CaseLogCreateInput): CaseLog!
  createOneCaseLogSubmission(data: CaseLogSubmissionCreateInput): CaseLogSubmission!
  createOneComplaint(data: ComplaintCreateInput): Complaint!
  createOneContactSearch(data: ContactSearchCreateInput): ContactSearch!
  createOneLeaderboard(data: LeaderboardCreateInput): Leaderboard!
  createOneMobile_Sales(data: Mobile_SalesCreateInput): Mobile_Sales!
  createOnePlanCall(data: PlanCallCreateInput): PlanCall!
  createOneProducts(data: ProductsCreateInput): Products!
  createOneSales(data: SalesCreateInput): Sales!
  createOneSearchHistory(data: SearchHistoryCreateInput): SearchHistory!
  createOneSliderAndCommission(data: SliderAndCommissionCreateInput): SliderAndCommission!
  createOneTerritoryCategorization(data: TerritoryCategorizationCreateInput): TerritoryCategorization!
  createOneUserProfile(data: UserProfileCreateInput): UserProfile!
  deleteManyCaseLog(where: CaseLogWhereInput): BatchPayload!
  deleteManyCaseLogSubmission(where: CaseLogSubmissionWhereInput): BatchPayload!
  deleteManyComplaint(where: ComplaintWhereInput): BatchPayload!
  deleteManyContactSearch(where: ContactSearchWhereInput): BatchPayload!
  deleteManyLeaderboard(where: LeaderboardWhereInput): BatchPayload!
  deleteManyMobile_Sales(where: Mobile_SalesWhereInput): BatchPayload!
  deleteManyPlanCall(where: PlanCallWhereInput): BatchPayload!
  deleteManyProducts(where: ProductsWhereInput): BatchPayload!
  deleteManySales(where: SalesWhereInput): BatchPayload!
  deleteManySearchHistory(where: SearchHistoryWhereInput): BatchPayload!
  deleteManySliderAndCommission(where: SliderAndCommissionWhereInput): BatchPayload!
  deleteManyTerritoryCategorization(where: TerritoryCategorizationWhereInput): BatchPayload!
  deleteManyUserProfile(where: UserProfileWhereInput): BatchPayload!
  deleteOneCaseLog(where: CaseLogWhereUniqueInput!): CaseLog
  deleteOneCaseLogSubmission(where: CaseLogSubmissionWhereUniqueInput!): CaseLogSubmission
  deleteOneComplaint(where: ComplaintWhereUniqueInput!): Complaint
  deleteOneContactSearch(where: ContactSearchWhereUniqueInput!): ContactSearch
  deleteOneLeaderboard(where: LeaderboardWhereUniqueInput!): Leaderboard
  deleteOneMobile_Sales(where: Mobile_SalesWhereUniqueInput!): Mobile_Sales
  deleteOnePlanCall(where: PlanCallWhereUniqueInput!): PlanCall
  deleteOneProducts(where: ProductsWhereUniqueInput!): Products
  deleteOneSales(where: SalesWhereUniqueInput!): Sales
  deleteOneSearchHistory(where: SearchHistoryWhereUniqueInput!): SearchHistory
  deleteOneSliderAndCommission(where: SliderAndCommissionWhereUniqueInput!): SliderAndCommission
  deleteOneTerritoryCategorization(where: TerritoryCategorizationWhereUniqueInput!): TerritoryCategorization
  deleteOneUserProfile(where: UserProfileWhereUniqueInput!): UserProfile
  updateField(data: UpdateFieldInput!, id: String!, modelId: String!): Field!
  updateManyCaseLog(data: CaseLogUpdateManyMutationInput!, where: CaseLogWhereInput): BatchPayload!
  updateManyCaseLogSubmission(data: CaseLogSubmissionUpdateManyMutationInput!, where: CaseLogSubmissionWhereInput): BatchPayload!
  updateManyComplaint(data: ComplaintUpdateManyMutationInput!, where: ComplaintWhereInput): BatchPayload!
  updateManyContactSearch(data: ContactSearchUpdateManyMutationInput!, where: ContactSearchWhereInput): BatchPayload!
  updateManyLeaderboard(data: LeaderboardUpdateManyMutationInput!, where: LeaderboardWhereInput): BatchPayload!
  updateManyMobile_Sales(data: Mobile_SalesUpdateManyMutationInput!, where: Mobile_SalesWhereInput): BatchPayload!
  updateManyPlanCall(data: PlanCallUpdateManyMutationInput!, where: PlanCallWhereInput): BatchPayload!
  updateManyProducts(data: ProductsUpdateManyMutationInput!, where: ProductsWhereInput): BatchPayload!
  updateManySales(data: SalesUpdateManyMutationInput!, where: SalesWhereInput): BatchPayload!
  updateManySearchHistory(data: SearchHistoryUpdateManyMutationInput!, where: SearchHistoryWhereInput): BatchPayload!
  updateManySliderAndCommission(data: SliderAndCommissionUpdateManyMutationInput!, where: SliderAndCommissionWhereInput): BatchPayload!
  updateManyTerritoryCategorization(data: TerritoryCategorizationUpdateManyMutationInput!, where: TerritoryCategorizationWhereInput): BatchPayload!
  updateManyUserProfile(data: UserProfileUpdateManyMutationInput!, where: UserProfileWhereInput): BatchPayload!
  updateModel(data: UpdateModelInput!, id: String!): Model!
  updateOneCaseLog(data: CaseLogUpdateInput!, where: CaseLogWhereUniqueInput!): CaseLog!
  updateOneCaseLogSubmission(data: CaseLogSubmissionUpdateInput!, where: CaseLogSubmissionWhereUniqueInput!): CaseLogSubmission!
  updateOneComplaint(data: ComplaintUpdateInput!, where: ComplaintWhereUniqueInput!): Complaint!
  updateOneContactSearch(data: ContactSearchUpdateInput!, where: ContactSearchWhereUniqueInput!): ContactSearch!
  updateOneLeaderboard(data: LeaderboardUpdateInput!, where: LeaderboardWhereUniqueInput!): Leaderboard!
  updateOneMobile_Sales(data: Mobile_SalesUpdateInput!, where: Mobile_SalesWhereUniqueInput!): Mobile_Sales!
  updateOnePlanCall(data: PlanCallUpdateInput!, where: PlanCallWhereUniqueInput!): PlanCall!
  updateOneProducts(data: ProductsUpdateInput!, where: ProductsWhereUniqueInput!): Products!
  updateOneSales(data: SalesUpdateInput!, where: SalesWhereUniqueInput!): Sales!
  updateOneSearchHistory(data: SearchHistoryUpdateInput!, where: SearchHistoryWhereUniqueInput!): SearchHistory!
  updateOneSliderAndCommission(data: SliderAndCommissionUpdateInput!, where: SliderAndCommissionWhereUniqueInput!): SliderAndCommission!
  updateOneTerritoryCategorization(data: TerritoryCategorizationUpdateInput!, where: TerritoryCategorizationWhereUniqueInput!): TerritoryCategorization!
  updateOneUserProfile(data: UserProfileUpdateInput!, where: UserProfileWhereUniqueInput!): UserProfile!
  upsertOneCaseLog(create: CaseLogCreateInput!, update: CaseLogUpdateInput!, where: CaseLogWhereUniqueInput!): CaseLog!
  upsertOneCaseLogSubmission(create: CaseLogSubmissionCreateInput!, update: CaseLogSubmissionUpdateInput!, where: CaseLogSubmissionWhereUniqueInput!): CaseLogSubmission!
  upsertOneComplaint(create: ComplaintCreateInput!, update: ComplaintUpdateInput!, where: ComplaintWhereUniqueInput!): Complaint!
  upsertOneContactSearch(create: ContactSearchCreateInput!, update: ContactSearchUpdateInput!, where: ContactSearchWhereUniqueInput!): ContactSearch!
  upsertOneLeaderboard(create: LeaderboardCreateInput!, update: LeaderboardUpdateInput!, where: LeaderboardWhereUniqueInput!): Leaderboard!
  upsertOneMobile_Sales(create: Mobile_SalesCreateInput!, update: Mobile_SalesUpdateInput!, where: Mobile_SalesWhereUniqueInput!): Mobile_Sales!
  upsertOnePlanCall(create: PlanCallCreateInput!, update: PlanCallUpdateInput!, where: PlanCallWhereUniqueInput!): PlanCall!
  upsertOneProducts(create: ProductsCreateInput!, update: ProductsUpdateInput!, where: ProductsWhereUniqueInput!): Products!
  upsertOneSales(create: SalesCreateInput!, update: SalesUpdateInput!, where: SalesWhereUniqueInput!): Sales!
  upsertOneSearchHistory(create: SearchHistoryCreateInput!, update: SearchHistoryUpdateInput!, where: SearchHistoryWhereUniqueInput!): SearchHistory!
  upsertOneSliderAndCommission(create: SliderAndCommissionCreateInput!, update: SliderAndCommissionUpdateInput!, where: SliderAndCommissionWhereUniqueInput!): SliderAndCommission!
  upsertOneTerritoryCategorization(create: TerritoryCategorizationCreateInput!, update: TerritoryCategorizationUpdateInput!, where: TerritoryCategorizationWhereUniqueInput!): TerritoryCategorization!
  upsertOneUserProfile(create: UserProfileCreateInput!, update: UserProfileUpdateInput!, where: UserProfileWhereUniqueInput!): UserProfile!
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime]
}

input NestedEnummobileSalesTargetTypeFilter {
  equals: mobileSalesTargetType
  in: [mobileSalesTargetType]
  not: NestedEnummobileSalesTargetTypeFilter
  notIn: [mobileSalesTargetType]
}

input NestedEnummobileSalesTargetTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnummobileSalesTargetTypeFilter
  _min: NestedEnummobileSalesTargetTypeFilter
  equals: mobileSalesTargetType
  in: [mobileSalesTargetType]
  not: NestedEnummobileSalesTargetTypeWithAggregatesFilter
  notIn: [mobileSalesTargetType]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NestedUuidFilter {
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedUuidFilter
  notIn: [String]
}

input NestedUuidNullableFilter {
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedUuidNullableFilter
  notIn: [String]
}

input NestedUuidNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedUuidNullableWithAggregatesFilter
  notIn: [String]
}

input NestedUuidWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedUuidWithAggregatesFilter
  notIn: [String]
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

enum NullsOrder {
  first
  last
}

type PlanCall {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  activitySubtype: String
  activityType: String
  contactId: String
  contactName: String
  createdInApp: DateTime
  description: String
  division: String
  endDate: DateTime
  lastModifiedInApp: DateTime
  location: String
  ownerCountry: String
  salesForceId: String
  startDate: DateTime
  status: String
  subject: String
  uniqueIdInApp: String!
}

type PlanCallCountAggregateOutputType {
  _all: Int!
  account: Int!
  activityOwnerEmail: Int!
  activityOwnerName: Int!
  activitySubtype: Int!
  activityType: Int!
  contactId: Int!
  contactName: Int!
  createdInApp: Int!
  description: Int!
  division: Int!
  endDate: Int!
  lastModifiedInApp: Int!
  location: Int!
  ownerCountry: Int!
  salesForceId: Int!
  startDate: Int!
  status: Int!
  subject: Int!
  uniqueIdInApp: Int!
}

input PlanCallCountOrderByAggregateInput {
  account: SortOrder
  activityOwnerEmail: SortOrder
  activityOwnerName: SortOrder
  activitySubtype: SortOrder
  activityType: SortOrder
  contactId: SortOrder
  contactName: SortOrder
  createdInApp: SortOrder
  description: SortOrder
  division: SortOrder
  endDate: SortOrder
  lastModifiedInApp: SortOrder
  location: SortOrder
  ownerCountry: SortOrder
  salesForceId: SortOrder
  startDate: SortOrder
  status: SortOrder
  subject: SortOrder
  uniqueIdInApp: SortOrder
}

input PlanCallCreateInput {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  activitySubtype: String
  activityType: String
  contactId: String
  contactName: String
  createdInApp: DateTime
  description: String
  division: String
  endDate: DateTime
  lastModifiedInApp: DateTime
  location: String
  ownerCountry: String
  salesForceId: String
  startDate: DateTime
  status: String
  subject: String
  uniqueIdInApp: String
}

input PlanCallCreateManyInput {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  activitySubtype: String
  activityType: String
  contactId: String
  contactName: String
  createdInApp: DateTime
  description: String
  division: String
  endDate: DateTime
  lastModifiedInApp: DateTime
  location: String
  ownerCountry: String
  salesForceId: String
  startDate: DateTime
  status: String
  subject: String
  uniqueIdInApp: String
}

type PlanCallMaxAggregateOutputType {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  activitySubtype: String
  activityType: String
  contactId: String
  contactName: String
  createdInApp: DateTime
  description: String
  division: String
  endDate: DateTime
  lastModifiedInApp: DateTime
  location: String
  ownerCountry: String
  salesForceId: String
  startDate: DateTime
  status: String
  subject: String
  uniqueIdInApp: String
}

input PlanCallMaxOrderByAggregateInput {
  account: SortOrder
  activityOwnerEmail: SortOrder
  activityOwnerName: SortOrder
  activitySubtype: SortOrder
  activityType: SortOrder
  contactId: SortOrder
  contactName: SortOrder
  createdInApp: SortOrder
  description: SortOrder
  division: SortOrder
  endDate: SortOrder
  lastModifiedInApp: SortOrder
  location: SortOrder
  ownerCountry: SortOrder
  salesForceId: SortOrder
  startDate: SortOrder
  status: SortOrder
  subject: SortOrder
  uniqueIdInApp: SortOrder
}

type PlanCallMinAggregateOutputType {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  activitySubtype: String
  activityType: String
  contactId: String
  contactName: String
  createdInApp: DateTime
  description: String
  division: String
  endDate: DateTime
  lastModifiedInApp: DateTime
  location: String
  ownerCountry: String
  salesForceId: String
  startDate: DateTime
  status: String
  subject: String
  uniqueIdInApp: String
}

input PlanCallMinOrderByAggregateInput {
  account: SortOrder
  activityOwnerEmail: SortOrder
  activityOwnerName: SortOrder
  activitySubtype: SortOrder
  activityType: SortOrder
  contactId: SortOrder
  contactName: SortOrder
  createdInApp: SortOrder
  description: SortOrder
  division: SortOrder
  endDate: SortOrder
  lastModifiedInApp: SortOrder
  location: SortOrder
  ownerCountry: SortOrder
  salesForceId: SortOrder
  startDate: SortOrder
  status: SortOrder
  subject: SortOrder
  uniqueIdInApp: SortOrder
}

input PlanCallOrderByWithAggregationInput {
  _count: PlanCallCountOrderByAggregateInput
  _max: PlanCallMaxOrderByAggregateInput
  _min: PlanCallMinOrderByAggregateInput
  account: SortOrderInput
  activityOwnerEmail: SortOrderInput
  activityOwnerName: SortOrderInput
  activitySubtype: SortOrderInput
  activityType: SortOrderInput
  contactId: SortOrderInput
  contactName: SortOrderInput
  createdInApp: SortOrderInput
  description: SortOrderInput
  division: SortOrderInput
  endDate: SortOrderInput
  lastModifiedInApp: SortOrderInput
  location: SortOrderInput
  ownerCountry: SortOrderInput
  salesForceId: SortOrderInput
  startDate: SortOrderInput
  status: SortOrderInput
  subject: SortOrderInput
  uniqueIdInApp: SortOrder
}

input PlanCallOrderByWithRelationInput {
  account: SortOrderInput
  activityOwnerEmail: SortOrderInput
  activityOwnerName: SortOrderInput
  activitySubtype: SortOrderInput
  activityType: SortOrderInput
  contactId: SortOrderInput
  contactName: SortOrderInput
  createdInApp: SortOrderInput
  description: SortOrderInput
  division: SortOrderInput
  endDate: SortOrderInput
  lastModifiedInApp: SortOrderInput
  location: SortOrderInput
  ownerCountry: SortOrderInput
  salesForceId: SortOrderInput
  startDate: SortOrderInput
  status: SortOrderInput
  subject: SortOrderInput
  uniqueIdInApp: SortOrder
}

enum PlanCallScalarFieldEnum {
  account
  activityOwnerEmail
  activityOwnerName
  activitySubtype
  activityType
  contactId
  contactName
  createdInApp
  description
  division
  endDate
  lastModifiedInApp
  location
  ownerCountry
  salesForceId
  startDate
  status
  subject
  uniqueIdInApp
}

input PlanCallScalarWhereWithAggregatesInput {
  AND: [PlanCallScalarWhereWithAggregatesInput]
  NOT: [PlanCallScalarWhereWithAggregatesInput]
  OR: [PlanCallScalarWhereWithAggregatesInput]
  account: StringNullableWithAggregatesFilter
  activityOwnerEmail: StringNullableWithAggregatesFilter
  activityOwnerName: StringNullableWithAggregatesFilter
  activitySubtype: StringNullableWithAggregatesFilter
  activityType: StringNullableWithAggregatesFilter
  contactId: StringNullableWithAggregatesFilter
  contactName: StringNullableWithAggregatesFilter
  createdInApp: DateTimeNullableWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  division: StringNullableWithAggregatesFilter
  endDate: DateTimeNullableWithAggregatesFilter
  lastModifiedInApp: DateTimeNullableWithAggregatesFilter
  location: StringNullableWithAggregatesFilter
  ownerCountry: StringNullableWithAggregatesFilter
  salesForceId: StringNullableWithAggregatesFilter
  startDate: DateTimeNullableWithAggregatesFilter
  status: StringNullableWithAggregatesFilter
  subject: StringNullableWithAggregatesFilter
  uniqueIdInApp: UuidWithAggregatesFilter
}

input PlanCallUncheckedCreateInput {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  activitySubtype: String
  activityType: String
  contactId: String
  contactName: String
  createdInApp: DateTime
  description: String
  division: String
  endDate: DateTime
  lastModifiedInApp: DateTime
  location: String
  ownerCountry: String
  salesForceId: String
  startDate: DateTime
  status: String
  subject: String
  uniqueIdInApp: String
}

input PlanCallUncheckedUpdateInput {
  account: NullableStringFieldUpdateOperationsInput
  activityOwnerEmail: NullableStringFieldUpdateOperationsInput
  activityOwnerName: NullableStringFieldUpdateOperationsInput
  activitySubtype: NullableStringFieldUpdateOperationsInput
  activityType: NullableStringFieldUpdateOperationsInput
  contactId: NullableStringFieldUpdateOperationsInput
  contactName: NullableStringFieldUpdateOperationsInput
  createdInApp: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  lastModifiedInApp: NullableDateTimeFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  ownerCountry: NullableStringFieldUpdateOperationsInput
  salesForceId: NullableStringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  subject: NullableStringFieldUpdateOperationsInput
  uniqueIdInApp: StringFieldUpdateOperationsInput
}

input PlanCallUncheckedUpdateManyInput {
  account: NullableStringFieldUpdateOperationsInput
  activityOwnerEmail: NullableStringFieldUpdateOperationsInput
  activityOwnerName: NullableStringFieldUpdateOperationsInput
  activitySubtype: NullableStringFieldUpdateOperationsInput
  activityType: NullableStringFieldUpdateOperationsInput
  contactId: NullableStringFieldUpdateOperationsInput
  contactName: NullableStringFieldUpdateOperationsInput
  createdInApp: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  lastModifiedInApp: NullableDateTimeFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  ownerCountry: NullableStringFieldUpdateOperationsInput
  salesForceId: NullableStringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  subject: NullableStringFieldUpdateOperationsInput
  uniqueIdInApp: StringFieldUpdateOperationsInput
}

input PlanCallUpdateInput {
  account: NullableStringFieldUpdateOperationsInput
  activityOwnerEmail: NullableStringFieldUpdateOperationsInput
  activityOwnerName: NullableStringFieldUpdateOperationsInput
  activitySubtype: NullableStringFieldUpdateOperationsInput
  activityType: NullableStringFieldUpdateOperationsInput
  contactId: NullableStringFieldUpdateOperationsInput
  contactName: NullableStringFieldUpdateOperationsInput
  createdInApp: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  lastModifiedInApp: NullableDateTimeFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  ownerCountry: NullableStringFieldUpdateOperationsInput
  salesForceId: NullableStringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  subject: NullableStringFieldUpdateOperationsInput
  uniqueIdInApp: StringFieldUpdateOperationsInput
}

input PlanCallUpdateManyMutationInput {
  account: NullableStringFieldUpdateOperationsInput
  activityOwnerEmail: NullableStringFieldUpdateOperationsInput
  activityOwnerName: NullableStringFieldUpdateOperationsInput
  activitySubtype: NullableStringFieldUpdateOperationsInput
  activityType: NullableStringFieldUpdateOperationsInput
  contactId: NullableStringFieldUpdateOperationsInput
  contactName: NullableStringFieldUpdateOperationsInput
  createdInApp: NullableDateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  endDate: NullableDateTimeFieldUpdateOperationsInput
  lastModifiedInApp: NullableDateTimeFieldUpdateOperationsInput
  location: NullableStringFieldUpdateOperationsInput
  ownerCountry: NullableStringFieldUpdateOperationsInput
  salesForceId: NullableStringFieldUpdateOperationsInput
  startDate: NullableDateTimeFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  subject: NullableStringFieldUpdateOperationsInput
  uniqueIdInApp: StringFieldUpdateOperationsInput
}

input PlanCallWhereInput {
  AND: [PlanCallWhereInput]
  NOT: [PlanCallWhereInput]
  OR: [PlanCallWhereInput]
  account: StringNullableFilter
  activityOwnerEmail: StringNullableFilter
  activityOwnerName: StringNullableFilter
  activitySubtype: StringNullableFilter
  activityType: StringNullableFilter
  contactId: StringNullableFilter
  contactName: StringNullableFilter
  createdInApp: DateTimeNullableFilter
  description: StringNullableFilter
  division: StringNullableFilter
  endDate: DateTimeNullableFilter
  lastModifiedInApp: DateTimeNullableFilter
  location: StringNullableFilter
  ownerCountry: StringNullableFilter
  salesForceId: StringNullableFilter
  startDate: DateTimeNullableFilter
  status: StringNullableFilter
  subject: StringNullableFilter
  uniqueIdInApp: UuidFilter
}

input PlanCallWhereUniqueInput {
  AND: [PlanCallWhereInput]
  NOT: [PlanCallWhereInput]
  OR: [PlanCallWhereInput]
  account: StringNullableFilter
  activityOwnerEmail: StringNullableFilter
  activityOwnerName: StringNullableFilter
  activitySubtype: StringNullableFilter
  activityType: StringNullableFilter
  contactId: StringNullableFilter
  contactName: StringNullableFilter
  createdInApp: DateTimeNullableFilter
  description: StringNullableFilter
  division: StringNullableFilter
  endDate: DateTimeNullableFilter
  lastModifiedInApp: DateTimeNullableFilter
  location: StringNullableFilter
  ownerCountry: StringNullableFilter
  salesForceId: StringNullableFilter
  startDate: DateTimeNullableFilter
  status: StringNullableFilter
  subject: StringNullableFilter
  uniqueIdInApp: String
}

type Products {
  _count: ProductsCountOutputType!
  caseLogSubmission(cursor: CaseLogSubmissionWhereUniqueInput, distinct: [CaseLogSubmissionScalarFieldEnum], orderBy: [CaseLogSubmissionOrderByWithRelationInput], skip: Int, take: Int, where: CaseLogSubmissionWhereInput): [CaseLogSubmission!]!
  country: String
  createdAt: DateTime
  gtin: String
  id: String!
  updatedAt: DateTime
  upn: String
  upnDescription: String
}

type ProductsCountAggregateOutputType {
  _all: Int!
  country: Int!
  createdAt: Int!
  gtin: Int!
  id: Int!
  updatedAt: Int!
  upn: Int!
  upnDescription: Int!
}

input ProductsCountOrderByAggregateInput {
  country: SortOrder
  createdAt: SortOrder
  gtin: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  upn: SortOrder
  upnDescription: SortOrder
}

type ProductsCountOutputType {
  caseLogSubmission: Int!
}

input ProductsCreateInput {
  caseLogSubmission: CaseLogSubmissionCreateNestedManyWithoutProductInput
  country: String
  createdAt: DateTime
  gtin: String
  id: String
  updatedAt: DateTime
  upn: String
  upnDescription: String
}

input ProductsCreateManyInput {
  country: String
  createdAt: DateTime
  gtin: String
  id: String
  updatedAt: DateTime
  upn: String
  upnDescription: String
}

input ProductsCreateNestedOneWithoutCaseLogSubmissionInput {
  connect: ProductsWhereUniqueInput
  connectOrCreate: ProductsCreateOrConnectWithoutCaseLogSubmissionInput
  create: ProductsCreateWithoutCaseLogSubmissionInput
}

input ProductsCreateOrConnectWithoutCaseLogSubmissionInput {
  create: ProductsCreateWithoutCaseLogSubmissionInput!
  where: ProductsWhereUniqueInput!
}

input ProductsCreateWithoutCaseLogSubmissionInput {
  country: String
  createdAt: DateTime
  gtin: String
  id: String
  updatedAt: DateTime
  upn: String
  upnDescription: String
}

type ProductsMaxAggregateOutputType {
  country: String
  createdAt: DateTime
  gtin: String
  id: String
  updatedAt: DateTime
  upn: String
  upnDescription: String
}

input ProductsMaxOrderByAggregateInput {
  country: SortOrder
  createdAt: SortOrder
  gtin: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  upn: SortOrder
  upnDescription: SortOrder
}

type ProductsMinAggregateOutputType {
  country: String
  createdAt: DateTime
  gtin: String
  id: String
  updatedAt: DateTime
  upn: String
  upnDescription: String
}

input ProductsMinOrderByAggregateInput {
  country: SortOrder
  createdAt: SortOrder
  gtin: SortOrder
  id: SortOrder
  updatedAt: SortOrder
  upn: SortOrder
  upnDescription: SortOrder
}

input ProductsNullableRelationFilter {
  is: ProductsWhereInput
  isNot: ProductsWhereInput
}

input ProductsOrderByWithAggregationInput {
  _count: ProductsCountOrderByAggregateInput
  _max: ProductsMaxOrderByAggregateInput
  _min: ProductsMinOrderByAggregateInput
  country: SortOrderInput
  createdAt: SortOrderInput
  gtin: SortOrderInput
  id: SortOrder
  updatedAt: SortOrderInput
  upn: SortOrderInput
  upnDescription: SortOrderInput
}

input ProductsOrderByWithRelationInput {
  caseLogSubmission: CaseLogSubmissionOrderByRelationAggregateInput
  country: SortOrderInput
  createdAt: SortOrderInput
  gtin: SortOrderInput
  id: SortOrder
  updatedAt: SortOrderInput
  upn: SortOrderInput
  upnDescription: SortOrderInput
}

enum ProductsScalarFieldEnum {
  country
  createdAt
  gtin
  id
  updatedAt
  upn
  upnDescription
}

input ProductsScalarWhereWithAggregatesInput {
  AND: [ProductsScalarWhereWithAggregatesInput]
  NOT: [ProductsScalarWhereWithAggregatesInput]
  OR: [ProductsScalarWhereWithAggregatesInput]
  country: StringNullableWithAggregatesFilter
  createdAt: DateTimeNullableWithAggregatesFilter
  gtin: StringNullableWithAggregatesFilter
  id: UuidWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
  upn: StringNullableWithAggregatesFilter
  upnDescription: StringNullableWithAggregatesFilter
}

input ProductsUncheckedCreateInput {
  caseLogSubmission: CaseLogSubmissionUncheckedCreateNestedManyWithoutProductInput
  country: String
  createdAt: DateTime
  gtin: String
  id: String
  updatedAt: DateTime
  upn: String
  upnDescription: String
}

input ProductsUncheckedCreateWithoutCaseLogSubmissionInput {
  country: String
  createdAt: DateTime
  gtin: String
  id: String
  updatedAt: DateTime
  upn: String
  upnDescription: String
}

input ProductsUncheckedUpdateInput {
  caseLogSubmission: CaseLogSubmissionUncheckedUpdateManyWithoutProductNestedInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  gtin: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  upn: NullableStringFieldUpdateOperationsInput
  upnDescription: NullableStringFieldUpdateOperationsInput
}

input ProductsUncheckedUpdateManyInput {
  country: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  gtin: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  upn: NullableStringFieldUpdateOperationsInput
  upnDescription: NullableStringFieldUpdateOperationsInput
}

input ProductsUncheckedUpdateWithoutCaseLogSubmissionInput {
  country: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  gtin: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  upn: NullableStringFieldUpdateOperationsInput
  upnDescription: NullableStringFieldUpdateOperationsInput
}

input ProductsUpdateInput {
  caseLogSubmission: CaseLogSubmissionUpdateManyWithoutProductNestedInput
  country: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  gtin: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  upn: NullableStringFieldUpdateOperationsInput
  upnDescription: NullableStringFieldUpdateOperationsInput
}

input ProductsUpdateManyMutationInput {
  country: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  gtin: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  upn: NullableStringFieldUpdateOperationsInput
  upnDescription: NullableStringFieldUpdateOperationsInput
}

input ProductsUpdateOneWithoutCaseLogSubmissionNestedInput {
  connect: ProductsWhereUniqueInput
  connectOrCreate: ProductsCreateOrConnectWithoutCaseLogSubmissionInput
  create: ProductsCreateWithoutCaseLogSubmissionInput
  delete: ProductsWhereInput
  disconnect: ProductsWhereInput
  update: ProductsUpdateToOneWithWhereWithoutCaseLogSubmissionInput
  upsert: ProductsUpsertWithoutCaseLogSubmissionInput
}

input ProductsUpdateToOneWithWhereWithoutCaseLogSubmissionInput {
  data: ProductsUpdateWithoutCaseLogSubmissionInput!
  where: ProductsWhereInput
}

input ProductsUpdateWithoutCaseLogSubmissionInput {
  country: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  gtin: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  upn: NullableStringFieldUpdateOperationsInput
  upnDescription: NullableStringFieldUpdateOperationsInput
}

input ProductsUpsertWithoutCaseLogSubmissionInput {
  create: ProductsCreateWithoutCaseLogSubmissionInput!
  update: ProductsUpdateWithoutCaseLogSubmissionInput!
  where: ProductsWhereInput
}

input ProductsWhereInput {
  AND: [ProductsWhereInput]
  NOT: [ProductsWhereInput]
  OR: [ProductsWhereInput]
  caseLogSubmission: CaseLogSubmissionListRelationFilter
  country: StringNullableFilter
  createdAt: DateTimeNullableFilter
  gtin: StringNullableFilter
  id: UuidFilter
  updatedAt: DateTimeNullableFilter
  upn: StringNullableFilter
  upnDescription: StringNullableFilter
}

input ProductsWhereUniqueInput {
  AND: [ProductsWhereInput]
  NOT: [ProductsWhereInput]
  OR: [ProductsWhereInput]
  caseLogSubmission: CaseLogSubmissionListRelationFilter
  country: StringNullableFilter
  createdAt: DateTimeNullableFilter
  gtin: StringNullableFilter
  id: String
  updatedAt: DateTimeNullableFilter
  upn: StringNullableFilter
  upnDescription: StringNullableFilter
}

type Query {
  aggregateCaseLog(cursor: CaseLogWhereUniqueInput, orderBy: [CaseLogOrderByWithRelationInput], skip: Int, take: Int, where: CaseLogWhereInput): AggregateCaseLog
  aggregateCaseLogSubmission(cursor: CaseLogSubmissionWhereUniqueInput, orderBy: [CaseLogSubmissionOrderByWithRelationInput], skip: Int, take: Int, where: CaseLogSubmissionWhereInput): AggregateCaseLogSubmission
  aggregateComplaint(cursor: ComplaintWhereUniqueInput, orderBy: [ComplaintOrderByWithRelationInput], skip: Int, take: Int, where: ComplaintWhereInput): AggregateComplaint
  aggregateContactSearch(cursor: ContactSearchWhereUniqueInput, orderBy: [ContactSearchOrderByWithRelationInput], skip: Int, take: Int, where: ContactSearchWhereInput): AggregateContactSearch
  aggregateLeaderboard(cursor: LeaderboardWhereUniqueInput, orderBy: [LeaderboardOrderByWithRelationInput], skip: Int, take: Int, where: LeaderboardWhereInput): AggregateLeaderboard
  aggregateMobile_Sales(cursor: Mobile_SalesWhereUniqueInput, orderBy: [Mobile_SalesOrderByWithRelationInput], skip: Int, take: Int, where: Mobile_SalesWhereInput): AggregateMobile_Sales
  aggregatePlanCall(cursor: PlanCallWhereUniqueInput, orderBy: [PlanCallOrderByWithRelationInput], skip: Int, take: Int, where: PlanCallWhereInput): AggregatePlanCall
  aggregateProducts(cursor: ProductsWhereUniqueInput, orderBy: [ProductsOrderByWithRelationInput], skip: Int, take: Int, where: ProductsWhereInput): AggregateProducts
  aggregateSales(cursor: SalesWhereUniqueInput, orderBy: [SalesOrderByWithRelationInput], skip: Int, take: Int, where: SalesWhereInput): AggregateSales
  aggregateSearchHistory(cursor: SearchHistoryWhereUniqueInput, orderBy: [SearchHistoryOrderByWithRelationInput], skip: Int, take: Int, where: SearchHistoryWhereInput): AggregateSearchHistory
  aggregateSliderAndCommission(cursor: SliderAndCommissionWhereUniqueInput, orderBy: [SliderAndCommissionOrderByWithRelationInput], skip: Int, take: Int, where: SliderAndCommissionWhereInput): AggregateSliderAndCommission
  aggregateTerritoryCategorization(cursor: TerritoryCategorizationWhereUniqueInput, orderBy: [TerritoryCategorizationOrderByWithRelationInput], skip: Int, take: Int, where: TerritoryCategorizationWhereInput): AggregateTerritoryCategorization
  aggregateUserProfile(cursor: UserProfileWhereUniqueInput, orderBy: [UserProfileOrderByWithRelationInput], skip: Int, take: Int, where: UserProfileWhereInput): AggregateUserProfile
  findFirstCaseLog(cursor: CaseLogWhereUniqueInput, distinct: [CaseLogScalarFieldEnum], orderBy: [CaseLogOrderByWithRelationInput], skip: Int, take: Int, where: CaseLogWhereInput): CaseLog
  findFirstCaseLogSubmission(cursor: CaseLogSubmissionWhereUniqueInput, distinct: [CaseLogSubmissionScalarFieldEnum], orderBy: [CaseLogSubmissionOrderByWithRelationInput], skip: Int, take: Int, where: CaseLogSubmissionWhereInput): CaseLogSubmission
  findFirstComplaint(cursor: ComplaintWhereUniqueInput, distinct: [ComplaintScalarFieldEnum], orderBy: [ComplaintOrderByWithRelationInput], skip: Int, take: Int, where: ComplaintWhereInput): Complaint
  findFirstContactSearch(cursor: ContactSearchWhereUniqueInput, distinct: [ContactSearchScalarFieldEnum], orderBy: [ContactSearchOrderByWithRelationInput], skip: Int, take: Int, where: ContactSearchWhereInput): ContactSearch
  findFirstLeaderboard(cursor: LeaderboardWhereUniqueInput, distinct: [LeaderboardScalarFieldEnum], orderBy: [LeaderboardOrderByWithRelationInput], skip: Int, take: Int, where: LeaderboardWhereInput): Leaderboard
  findFirstMobile_Sales(cursor: Mobile_SalesWhereUniqueInput, distinct: [Mobile_SalesScalarFieldEnum], orderBy: [Mobile_SalesOrderByWithRelationInput], skip: Int, take: Int, where: Mobile_SalesWhereInput): Mobile_Sales
  findFirstPlanCall(cursor: PlanCallWhereUniqueInput, distinct: [PlanCallScalarFieldEnum], orderBy: [PlanCallOrderByWithRelationInput], skip: Int, take: Int, where: PlanCallWhereInput): PlanCall
  findFirstProducts(cursor: ProductsWhereUniqueInput, distinct: [ProductsScalarFieldEnum], orderBy: [ProductsOrderByWithRelationInput], skip: Int, take: Int, where: ProductsWhereInput): Products
  findFirstSales(cursor: SalesWhereUniqueInput, distinct: [SalesScalarFieldEnum], orderBy: [SalesOrderByWithRelationInput], skip: Int, take: Int, where: SalesWhereInput): Sales
  findFirstSearchHistory(cursor: SearchHistoryWhereUniqueInput, distinct: [SearchHistoryScalarFieldEnum], orderBy: [SearchHistoryOrderByWithRelationInput], skip: Int, take: Int, where: SearchHistoryWhereInput): SearchHistory
  findFirstSliderAndCommission(cursor: SliderAndCommissionWhereUniqueInput, distinct: [SliderAndCommissionScalarFieldEnum], orderBy: [SliderAndCommissionOrderByWithRelationInput], skip: Int, take: Int, where: SliderAndCommissionWhereInput): SliderAndCommission
  findFirstTerritoryCategorization(cursor: TerritoryCategorizationWhereUniqueInput, distinct: [TerritoryCategorizationScalarFieldEnum], orderBy: [TerritoryCategorizationOrderByWithRelationInput], skip: Int, take: Int, where: TerritoryCategorizationWhereInput): TerritoryCategorization
  findFirstUserProfile(cursor: UserProfileWhereUniqueInput, distinct: [UserProfileScalarFieldEnum], orderBy: [UserProfileOrderByWithRelationInput], skip: Int, take: Int, where: UserProfileWhereInput): UserProfile
  findManyCaseLog(cursor: CaseLogWhereUniqueInput, distinct: [CaseLogScalarFieldEnum], orderBy: [CaseLogOrderByWithRelationInput], skip: Int, take: Int, where: CaseLogWhereInput): [CaseLog!]!
  findManyCaseLogCount(cursor: CaseLogWhereUniqueInput, distinct: [CaseLogScalarFieldEnum], orderBy: [CaseLogOrderByWithRelationInput], skip: Int, take: Int, where: CaseLogWhereInput): Int!
  findManyCaseLogSubmission(cursor: CaseLogSubmissionWhereUniqueInput, distinct: [CaseLogSubmissionScalarFieldEnum], orderBy: [CaseLogSubmissionOrderByWithRelationInput], skip: Int, take: Int, where: CaseLogSubmissionWhereInput): [CaseLogSubmission!]!
  findManyCaseLogSubmissionCount(cursor: CaseLogSubmissionWhereUniqueInput, distinct: [CaseLogSubmissionScalarFieldEnum], orderBy: [CaseLogSubmissionOrderByWithRelationInput], skip: Int, take: Int, where: CaseLogSubmissionWhereInput): Int!
  findManyComplaint(cursor: ComplaintWhereUniqueInput, distinct: [ComplaintScalarFieldEnum], orderBy: [ComplaintOrderByWithRelationInput], skip: Int, take: Int, where: ComplaintWhereInput): [Complaint!]!
  findManyComplaintCount(cursor: ComplaintWhereUniqueInput, distinct: [ComplaintScalarFieldEnum], orderBy: [ComplaintOrderByWithRelationInput], skip: Int, take: Int, where: ComplaintWhereInput): Int!
  findManyContactSearch(cursor: ContactSearchWhereUniqueInput, distinct: [ContactSearchScalarFieldEnum], orderBy: [ContactSearchOrderByWithRelationInput], skip: Int, take: Int, where: ContactSearchWhereInput): [ContactSearch!]!
  findManyContactSearchCount(cursor: ContactSearchWhereUniqueInput, distinct: [ContactSearchScalarFieldEnum], orderBy: [ContactSearchOrderByWithRelationInput], skip: Int, take: Int, where: ContactSearchWhereInput): Int!
  findManyLeaderboard(cursor: LeaderboardWhereUniqueInput, distinct: [LeaderboardScalarFieldEnum], orderBy: [LeaderboardOrderByWithRelationInput], skip: Int, take: Int, where: LeaderboardWhereInput): [Leaderboard!]!
  findManyLeaderboardCount(cursor: LeaderboardWhereUniqueInput, distinct: [LeaderboardScalarFieldEnum], orderBy: [LeaderboardOrderByWithRelationInput], skip: Int, take: Int, where: LeaderboardWhereInput): Int!
  findManyMobile_Sales(cursor: Mobile_SalesWhereUniqueInput, distinct: [Mobile_SalesScalarFieldEnum], orderBy: [Mobile_SalesOrderByWithRelationInput], skip: Int, take: Int, where: Mobile_SalesWhereInput): [Mobile_Sales!]!
  findManyMobile_SalesCount(cursor: Mobile_SalesWhereUniqueInput, distinct: [Mobile_SalesScalarFieldEnum], orderBy: [Mobile_SalesOrderByWithRelationInput], skip: Int, take: Int, where: Mobile_SalesWhereInput): Int!
  findManyPlanCall(cursor: PlanCallWhereUniqueInput, distinct: [PlanCallScalarFieldEnum], orderBy: [PlanCallOrderByWithRelationInput], skip: Int, take: Int, where: PlanCallWhereInput): [PlanCall!]!
  findManyPlanCallCount(cursor: PlanCallWhereUniqueInput, distinct: [PlanCallScalarFieldEnum], orderBy: [PlanCallOrderByWithRelationInput], skip: Int, take: Int, where: PlanCallWhereInput): Int!
  findManyProducts(cursor: ProductsWhereUniqueInput, distinct: [ProductsScalarFieldEnum], orderBy: [ProductsOrderByWithRelationInput], skip: Int, take: Int, where: ProductsWhereInput): [Products!]!
  findManyProductsCount(cursor: ProductsWhereUniqueInput, distinct: [ProductsScalarFieldEnum], orderBy: [ProductsOrderByWithRelationInput], skip: Int, take: Int, where: ProductsWhereInput): Int!
  findManySales(cursor: SalesWhereUniqueInput, distinct: [SalesScalarFieldEnum], orderBy: [SalesOrderByWithRelationInput], skip: Int, take: Int, where: SalesWhereInput): [Sales!]!
  findManySalesCount(cursor: SalesWhereUniqueInput, distinct: [SalesScalarFieldEnum], orderBy: [SalesOrderByWithRelationInput], skip: Int, take: Int, where: SalesWhereInput): Int!
  findManySearchHistory(cursor: SearchHistoryWhereUniqueInput, distinct: [SearchHistoryScalarFieldEnum], orderBy: [SearchHistoryOrderByWithRelationInput], skip: Int, take: Int, where: SearchHistoryWhereInput): [SearchHistory!]!
  findManySearchHistoryCount(cursor: SearchHistoryWhereUniqueInput, distinct: [SearchHistoryScalarFieldEnum], orderBy: [SearchHistoryOrderByWithRelationInput], skip: Int, take: Int, where: SearchHistoryWhereInput): Int!
  findManySliderAndCommission(cursor: SliderAndCommissionWhereUniqueInput, distinct: [SliderAndCommissionScalarFieldEnum], orderBy: [SliderAndCommissionOrderByWithRelationInput], skip: Int, take: Int, where: SliderAndCommissionWhereInput): [SliderAndCommission!]!
  findManySliderAndCommissionCount(cursor: SliderAndCommissionWhereUniqueInput, distinct: [SliderAndCommissionScalarFieldEnum], orderBy: [SliderAndCommissionOrderByWithRelationInput], skip: Int, take: Int, where: SliderAndCommissionWhereInput): Int!
  findManyTerritoryCategorization(cursor: TerritoryCategorizationWhereUniqueInput, distinct: [TerritoryCategorizationScalarFieldEnum], orderBy: [TerritoryCategorizationOrderByWithRelationInput], skip: Int, take: Int, where: TerritoryCategorizationWhereInput): [TerritoryCategorization!]!
  findManyTerritoryCategorizationCount(cursor: TerritoryCategorizationWhereUniqueInput, distinct: [TerritoryCategorizationScalarFieldEnum], orderBy: [TerritoryCategorizationOrderByWithRelationInput], skip: Int, take: Int, where: TerritoryCategorizationWhereInput): Int!
  findManyUserProfile(cursor: UserProfileWhereUniqueInput, distinct: [UserProfileScalarFieldEnum], orderBy: [UserProfileOrderByWithRelationInput], skip: Int, take: Int, where: UserProfileWhereInput): [UserProfile!]!
  findManyUserProfileCount(cursor: UserProfileWhereUniqueInput, distinct: [UserProfileScalarFieldEnum], orderBy: [UserProfileOrderByWithRelationInput], skip: Int, take: Int, where: UserProfileWhereInput): Int!
  findUniqueCaseLog(where: CaseLogWhereUniqueInput!): CaseLog
  findUniqueCaseLogSubmission(where: CaseLogSubmissionWhereUniqueInput!): CaseLogSubmission
  findUniqueComplaint(where: ComplaintWhereUniqueInput!): Complaint
  findUniqueContactSearch(where: ContactSearchWhereUniqueInput!): ContactSearch
  findUniqueLeaderboard(where: LeaderboardWhereUniqueInput!): Leaderboard
  findUniqueMobile_Sales(where: Mobile_SalesWhereUniqueInput!): Mobile_Sales
  findUniquePlanCall(where: PlanCallWhereUniqueInput!): PlanCall
  findUniqueProducts(where: ProductsWhereUniqueInput!): Products
  findUniqueSales(where: SalesWhereUniqueInput!): Sales
  findUniqueSearchHistory(where: SearchHistoryWhereUniqueInput!): SearchHistory
  findUniqueSliderAndCommission(where: SliderAndCommissionWhereUniqueInput!): SliderAndCommission
  findUniqueTerritoryCategorization(where: TerritoryCategorizationWhereUniqueInput!): TerritoryCategorization
  findUniqueUserProfile(where: UserProfileWhereUniqueInput!): UserProfile
  getSchema: Schema!
}

enum QueryMode {
  default
  insensitive
}

type Sales {
  additionalPayout: String
  additionalPayoutCE: String
  additionalPayoutSC: String
  commissionPayoutByQuarter: String
  commissionPayoutByQuarter_forNewHire: String
  commissionPayoutQ5: String
  commissionPayoutQ5_forNewHire: String
  commissionPercentageByQuarter: String
  commissionPercentageByQuarter_forNewHire: String
  commissionPercentageQ5: String
  commissionPercentageQ5_forNewHire: String
  createdAt: DateTime
  currency: String
  earlyBird: String
  earlyBirdEligibility: String
  guaranttedPayout: String
  id: Int!
  kicker: String
  mixedBag: String
  month: String
  newHire: String
  productType: String
  quarter: String
  salesAchievementPercentageByMonth: String
  salesAchievementPercentageByQuarter: String
  salesAchievementPercentageByYear: String
  salesAchievementPercentageByYear_forNewHire: String
  salesAchivementPercentageByQuarter_forNewHire: String
  salesByMonth: String
  salesByMonth_forNewHire: String
  salesByQuarter: String
  salesByQuarter_forNewHire: String
  salesByYear: String
  salesByYear_forNewHire: String
  salesRepEmail: String
  sipEligibility: String
  targetByMonth: String
  targetByQuarter: String
  targetByYear: String
  targetByYearUSD: String
  territoryCategory: String
  updatedAt: DateTime
  variablePayByMonth: String
  variablePayByQuarter: String
  variablePayByYear: String
  variablePayQ5: String
  variablePayoutByQuarter: String
  variablePayoutByQuarter_forNewHire: String
  variablePayoutPercentageByQuarter: String
  variablePayoutPercentageByQuarter_forNewHire: String
  variablePayoutPercentageByYear: String
  variablePayoutPercentageQ5: String
  variablePayoutPercentageQ5_forNewHire: String
  variablePayoutQ5: String
  variablePayoutQ5_forNewHire: String
  year: String
}

type SalesAvgAggregateOutputType {
  id: Float
}

input SalesAvgOrderByAggregateInput {
  id: SortOrder
}

type SalesCountAggregateOutputType {
  _all: Int!
  additionalPayout: Int!
  additionalPayoutCE: Int!
  additionalPayoutSC: Int!
  commissionPayoutByQuarter: Int!
  commissionPayoutByQuarter_forNewHire: Int!
  commissionPayoutQ5: Int!
  commissionPayoutQ5_forNewHire: Int!
  commissionPercentageByQuarter: Int!
  commissionPercentageByQuarter_forNewHire: Int!
  commissionPercentageQ5: Int!
  commissionPercentageQ5_forNewHire: Int!
  createdAt: Int!
  currency: Int!
  earlyBird: Int!
  earlyBirdEligibility: Int!
  guaranttedPayout: Int!
  id: Int!
  kicker: Int!
  mixedBag: Int!
  month: Int!
  newHire: Int!
  productType: Int!
  quarter: Int!
  salesAchievementPercentageByMonth: Int!
  salesAchievementPercentageByQuarter: Int!
  salesAchievementPercentageByYear: Int!
  salesAchievementPercentageByYear_forNewHire: Int!
  salesAchivementPercentageByQuarter_forNewHire: Int!
  salesByMonth: Int!
  salesByMonth_forNewHire: Int!
  salesByQuarter: Int!
  salesByQuarter_forNewHire: Int!
  salesByYear: Int!
  salesByYear_forNewHire: Int!
  salesRepEmail: Int!
  sipEligibility: Int!
  targetByMonth: Int!
  targetByQuarter: Int!
  targetByYear: Int!
  targetByYearUSD: Int!
  territoryCategory: Int!
  updatedAt: Int!
  variablePayByMonth: Int!
  variablePayByQuarter: Int!
  variablePayByYear: Int!
  variablePayQ5: Int!
  variablePayoutByQuarter: Int!
  variablePayoutByQuarter_forNewHire: Int!
  variablePayoutPercentageByQuarter: Int!
  variablePayoutPercentageByQuarter_forNewHire: Int!
  variablePayoutPercentageByYear: Int!
  variablePayoutPercentageQ5: Int!
  variablePayoutPercentageQ5_forNewHire: Int!
  variablePayoutQ5: Int!
  variablePayoutQ5_forNewHire: Int!
  year: Int!
}

input SalesCountOrderByAggregateInput {
  additionalPayout: SortOrder
  additionalPayoutCE: SortOrder
  additionalPayoutSC: SortOrder
  commissionPayoutByQuarter: SortOrder
  commissionPayoutByQuarter_forNewHire: SortOrder
  commissionPayoutQ5: SortOrder
  commissionPayoutQ5_forNewHire: SortOrder
  commissionPercentageByQuarter: SortOrder
  commissionPercentageByQuarter_forNewHire: SortOrder
  commissionPercentageQ5: SortOrder
  commissionPercentageQ5_forNewHire: SortOrder
  createdAt: SortOrder
  currency: SortOrder
  earlyBird: SortOrder
  earlyBirdEligibility: SortOrder
  guaranttedPayout: SortOrder
  id: SortOrder
  kicker: SortOrder
  mixedBag: SortOrder
  month: SortOrder
  newHire: SortOrder
  productType: SortOrder
  quarter: SortOrder
  salesAchievementPercentageByMonth: SortOrder
  salesAchievementPercentageByQuarter: SortOrder
  salesAchievementPercentageByYear: SortOrder
  salesAchievementPercentageByYear_forNewHire: SortOrder
  salesAchivementPercentageByQuarter_forNewHire: SortOrder
  salesByMonth: SortOrder
  salesByMonth_forNewHire: SortOrder
  salesByQuarter: SortOrder
  salesByQuarter_forNewHire: SortOrder
  salesByYear: SortOrder
  salesByYear_forNewHire: SortOrder
  salesRepEmail: SortOrder
  sipEligibility: SortOrder
  targetByMonth: SortOrder
  targetByQuarter: SortOrder
  targetByYear: SortOrder
  targetByYearUSD: SortOrder
  territoryCategory: SortOrder
  updatedAt: SortOrder
  variablePayByMonth: SortOrder
  variablePayByQuarter: SortOrder
  variablePayByYear: SortOrder
  variablePayQ5: SortOrder
  variablePayoutByQuarter: SortOrder
  variablePayoutByQuarter_forNewHire: SortOrder
  variablePayoutPercentageByQuarter: SortOrder
  variablePayoutPercentageByQuarter_forNewHire: SortOrder
  variablePayoutPercentageByYear: SortOrder
  variablePayoutPercentageQ5: SortOrder
  variablePayoutPercentageQ5_forNewHire: SortOrder
  variablePayoutQ5: SortOrder
  variablePayoutQ5_forNewHire: SortOrder
  year: SortOrder
}

input SalesCreateInput {
  additionalPayout: String
  additionalPayoutCE: String
  additionalPayoutSC: String
  commissionPayoutByQuarter: String
  commissionPayoutByQuarter_forNewHire: String
  commissionPayoutQ5: String
  commissionPayoutQ5_forNewHire: String
  commissionPercentageByQuarter: String
  commissionPercentageByQuarter_forNewHire: String
  commissionPercentageQ5: String
  commissionPercentageQ5_forNewHire: String
  createdAt: DateTime
  currency: String
  earlyBird: String
  earlyBirdEligibility: String
  guaranttedPayout: String
  kicker: String
  mixedBag: String
  month: String
  newHire: String
  productType: String
  quarter: String
  salesAchievementPercentageByMonth: String
  salesAchievementPercentageByQuarter: String
  salesAchievementPercentageByYear: String
  salesAchievementPercentageByYear_forNewHire: String
  salesAchivementPercentageByQuarter_forNewHire: String
  salesByMonth: String
  salesByMonth_forNewHire: String
  salesByQuarter: String
  salesByQuarter_forNewHire: String
  salesByYear: String
  salesByYear_forNewHire: String
  salesRepEmail: String
  sipEligibility: String
  targetByMonth: String
  targetByQuarter: String
  targetByYear: String
  targetByYearUSD: String
  territoryCategory: String
  updatedAt: DateTime
  variablePayByMonth: String
  variablePayByQuarter: String
  variablePayByYear: String
  variablePayQ5: String
  variablePayoutByQuarter: String
  variablePayoutByQuarter_forNewHire: String
  variablePayoutPercentageByQuarter: String
  variablePayoutPercentageByQuarter_forNewHire: String
  variablePayoutPercentageByYear: String
  variablePayoutPercentageQ5: String
  variablePayoutPercentageQ5_forNewHire: String
  variablePayoutQ5: String
  variablePayoutQ5_forNewHire: String
  year: String
}

input SalesCreateManyInput {
  additionalPayout: String
  additionalPayoutCE: String
  additionalPayoutSC: String
  commissionPayoutByQuarter: String
  commissionPayoutByQuarter_forNewHire: String
  commissionPayoutQ5: String
  commissionPayoutQ5_forNewHire: String
  commissionPercentageByQuarter: String
  commissionPercentageByQuarter_forNewHire: String
  commissionPercentageQ5: String
  commissionPercentageQ5_forNewHire: String
  createdAt: DateTime
  currency: String
  earlyBird: String
  earlyBirdEligibility: String
  guaranttedPayout: String
  id: Int
  kicker: String
  mixedBag: String
  month: String
  newHire: String
  productType: String
  quarter: String
  salesAchievementPercentageByMonth: String
  salesAchievementPercentageByQuarter: String
  salesAchievementPercentageByYear: String
  salesAchievementPercentageByYear_forNewHire: String
  salesAchivementPercentageByQuarter_forNewHire: String
  salesByMonth: String
  salesByMonth_forNewHire: String
  salesByQuarter: String
  salesByQuarter_forNewHire: String
  salesByYear: String
  salesByYear_forNewHire: String
  salesRepEmail: String
  sipEligibility: String
  targetByMonth: String
  targetByQuarter: String
  targetByYear: String
  targetByYearUSD: String
  territoryCategory: String
  updatedAt: DateTime
  variablePayByMonth: String
  variablePayByQuarter: String
  variablePayByYear: String
  variablePayQ5: String
  variablePayoutByQuarter: String
  variablePayoutByQuarter_forNewHire: String
  variablePayoutPercentageByQuarter: String
  variablePayoutPercentageByQuarter_forNewHire: String
  variablePayoutPercentageByYear: String
  variablePayoutPercentageQ5: String
  variablePayoutPercentageQ5_forNewHire: String
  variablePayoutQ5: String
  variablePayoutQ5_forNewHire: String
  year: String
}

type SalesMaxAggregateOutputType {
  additionalPayout: String
  additionalPayoutCE: String
  additionalPayoutSC: String
  commissionPayoutByQuarter: String
  commissionPayoutByQuarter_forNewHire: String
  commissionPayoutQ5: String
  commissionPayoutQ5_forNewHire: String
  commissionPercentageByQuarter: String
  commissionPercentageByQuarter_forNewHire: String
  commissionPercentageQ5: String
  commissionPercentageQ5_forNewHire: String
  createdAt: DateTime
  currency: String
  earlyBird: String
  earlyBirdEligibility: String
  guaranttedPayout: String
  id: Int
  kicker: String
  mixedBag: String
  month: String
  newHire: String
  productType: String
  quarter: String
  salesAchievementPercentageByMonth: String
  salesAchievementPercentageByQuarter: String
  salesAchievementPercentageByYear: String
  salesAchievementPercentageByYear_forNewHire: String
  salesAchivementPercentageByQuarter_forNewHire: String
  salesByMonth: String
  salesByMonth_forNewHire: String
  salesByQuarter: String
  salesByQuarter_forNewHire: String
  salesByYear: String
  salesByYear_forNewHire: String
  salesRepEmail: String
  sipEligibility: String
  targetByMonth: String
  targetByQuarter: String
  targetByYear: String
  targetByYearUSD: String
  territoryCategory: String
  updatedAt: DateTime
  variablePayByMonth: String
  variablePayByQuarter: String
  variablePayByYear: String
  variablePayQ5: String
  variablePayoutByQuarter: String
  variablePayoutByQuarter_forNewHire: String
  variablePayoutPercentageByQuarter: String
  variablePayoutPercentageByQuarter_forNewHire: String
  variablePayoutPercentageByYear: String
  variablePayoutPercentageQ5: String
  variablePayoutPercentageQ5_forNewHire: String
  variablePayoutQ5: String
  variablePayoutQ5_forNewHire: String
  year: String
}

input SalesMaxOrderByAggregateInput {
  additionalPayout: SortOrder
  additionalPayoutCE: SortOrder
  additionalPayoutSC: SortOrder
  commissionPayoutByQuarter: SortOrder
  commissionPayoutByQuarter_forNewHire: SortOrder
  commissionPayoutQ5: SortOrder
  commissionPayoutQ5_forNewHire: SortOrder
  commissionPercentageByQuarter: SortOrder
  commissionPercentageByQuarter_forNewHire: SortOrder
  commissionPercentageQ5: SortOrder
  commissionPercentageQ5_forNewHire: SortOrder
  createdAt: SortOrder
  currency: SortOrder
  earlyBird: SortOrder
  earlyBirdEligibility: SortOrder
  guaranttedPayout: SortOrder
  id: SortOrder
  kicker: SortOrder
  mixedBag: SortOrder
  month: SortOrder
  newHire: SortOrder
  productType: SortOrder
  quarter: SortOrder
  salesAchievementPercentageByMonth: SortOrder
  salesAchievementPercentageByQuarter: SortOrder
  salesAchievementPercentageByYear: SortOrder
  salesAchievementPercentageByYear_forNewHire: SortOrder
  salesAchivementPercentageByQuarter_forNewHire: SortOrder
  salesByMonth: SortOrder
  salesByMonth_forNewHire: SortOrder
  salesByQuarter: SortOrder
  salesByQuarter_forNewHire: SortOrder
  salesByYear: SortOrder
  salesByYear_forNewHire: SortOrder
  salesRepEmail: SortOrder
  sipEligibility: SortOrder
  targetByMonth: SortOrder
  targetByQuarter: SortOrder
  targetByYear: SortOrder
  targetByYearUSD: SortOrder
  territoryCategory: SortOrder
  updatedAt: SortOrder
  variablePayByMonth: SortOrder
  variablePayByQuarter: SortOrder
  variablePayByYear: SortOrder
  variablePayQ5: SortOrder
  variablePayoutByQuarter: SortOrder
  variablePayoutByQuarter_forNewHire: SortOrder
  variablePayoutPercentageByQuarter: SortOrder
  variablePayoutPercentageByQuarter_forNewHire: SortOrder
  variablePayoutPercentageByYear: SortOrder
  variablePayoutPercentageQ5: SortOrder
  variablePayoutPercentageQ5_forNewHire: SortOrder
  variablePayoutQ5: SortOrder
  variablePayoutQ5_forNewHire: SortOrder
  year: SortOrder
}

type SalesMinAggregateOutputType {
  additionalPayout: String
  additionalPayoutCE: String
  additionalPayoutSC: String
  commissionPayoutByQuarter: String
  commissionPayoutByQuarter_forNewHire: String
  commissionPayoutQ5: String
  commissionPayoutQ5_forNewHire: String
  commissionPercentageByQuarter: String
  commissionPercentageByQuarter_forNewHire: String
  commissionPercentageQ5: String
  commissionPercentageQ5_forNewHire: String
  createdAt: DateTime
  currency: String
  earlyBird: String
  earlyBirdEligibility: String
  guaranttedPayout: String
  id: Int
  kicker: String
  mixedBag: String
  month: String
  newHire: String
  productType: String
  quarter: String
  salesAchievementPercentageByMonth: String
  salesAchievementPercentageByQuarter: String
  salesAchievementPercentageByYear: String
  salesAchievementPercentageByYear_forNewHire: String
  salesAchivementPercentageByQuarter_forNewHire: String
  salesByMonth: String
  salesByMonth_forNewHire: String
  salesByQuarter: String
  salesByQuarter_forNewHire: String
  salesByYear: String
  salesByYear_forNewHire: String
  salesRepEmail: String
  sipEligibility: String
  targetByMonth: String
  targetByQuarter: String
  targetByYear: String
  targetByYearUSD: String
  territoryCategory: String
  updatedAt: DateTime
  variablePayByMonth: String
  variablePayByQuarter: String
  variablePayByYear: String
  variablePayQ5: String
  variablePayoutByQuarter: String
  variablePayoutByQuarter_forNewHire: String
  variablePayoutPercentageByQuarter: String
  variablePayoutPercentageByQuarter_forNewHire: String
  variablePayoutPercentageByYear: String
  variablePayoutPercentageQ5: String
  variablePayoutPercentageQ5_forNewHire: String
  variablePayoutQ5: String
  variablePayoutQ5_forNewHire: String
  year: String
}

input SalesMinOrderByAggregateInput {
  additionalPayout: SortOrder
  additionalPayoutCE: SortOrder
  additionalPayoutSC: SortOrder
  commissionPayoutByQuarter: SortOrder
  commissionPayoutByQuarter_forNewHire: SortOrder
  commissionPayoutQ5: SortOrder
  commissionPayoutQ5_forNewHire: SortOrder
  commissionPercentageByQuarter: SortOrder
  commissionPercentageByQuarter_forNewHire: SortOrder
  commissionPercentageQ5: SortOrder
  commissionPercentageQ5_forNewHire: SortOrder
  createdAt: SortOrder
  currency: SortOrder
  earlyBird: SortOrder
  earlyBirdEligibility: SortOrder
  guaranttedPayout: SortOrder
  id: SortOrder
  kicker: SortOrder
  mixedBag: SortOrder
  month: SortOrder
  newHire: SortOrder
  productType: SortOrder
  quarter: SortOrder
  salesAchievementPercentageByMonth: SortOrder
  salesAchievementPercentageByQuarter: SortOrder
  salesAchievementPercentageByYear: SortOrder
  salesAchievementPercentageByYear_forNewHire: SortOrder
  salesAchivementPercentageByQuarter_forNewHire: SortOrder
  salesByMonth: SortOrder
  salesByMonth_forNewHire: SortOrder
  salesByQuarter: SortOrder
  salesByQuarter_forNewHire: SortOrder
  salesByYear: SortOrder
  salesByYear_forNewHire: SortOrder
  salesRepEmail: SortOrder
  sipEligibility: SortOrder
  targetByMonth: SortOrder
  targetByQuarter: SortOrder
  targetByYear: SortOrder
  targetByYearUSD: SortOrder
  territoryCategory: SortOrder
  updatedAt: SortOrder
  variablePayByMonth: SortOrder
  variablePayByQuarter: SortOrder
  variablePayByYear: SortOrder
  variablePayQ5: SortOrder
  variablePayoutByQuarter: SortOrder
  variablePayoutByQuarter_forNewHire: SortOrder
  variablePayoutPercentageByQuarter: SortOrder
  variablePayoutPercentageByQuarter_forNewHire: SortOrder
  variablePayoutPercentageByYear: SortOrder
  variablePayoutPercentageQ5: SortOrder
  variablePayoutPercentageQ5_forNewHire: SortOrder
  variablePayoutQ5: SortOrder
  variablePayoutQ5_forNewHire: SortOrder
  year: SortOrder
}

input SalesOrderByWithAggregationInput {
  _avg: SalesAvgOrderByAggregateInput
  _count: SalesCountOrderByAggregateInput
  _max: SalesMaxOrderByAggregateInput
  _min: SalesMinOrderByAggregateInput
  _sum: SalesSumOrderByAggregateInput
  additionalPayout: SortOrderInput
  additionalPayoutCE: SortOrderInput
  additionalPayoutSC: SortOrderInput
  commissionPayoutByQuarter: SortOrderInput
  commissionPayoutByQuarter_forNewHire: SortOrderInput
  commissionPayoutQ5: SortOrderInput
  commissionPayoutQ5_forNewHire: SortOrderInput
  commissionPercentageByQuarter: SortOrderInput
  commissionPercentageByQuarter_forNewHire: SortOrderInput
  commissionPercentageQ5: SortOrderInput
  commissionPercentageQ5_forNewHire: SortOrderInput
  createdAt: SortOrderInput
  currency: SortOrderInput
  earlyBird: SortOrderInput
  earlyBirdEligibility: SortOrderInput
  guaranttedPayout: SortOrderInput
  id: SortOrder
  kicker: SortOrderInput
  mixedBag: SortOrderInput
  month: SortOrderInput
  newHire: SortOrderInput
  productType: SortOrderInput
  quarter: SortOrderInput
  salesAchievementPercentageByMonth: SortOrderInput
  salesAchievementPercentageByQuarter: SortOrderInput
  salesAchievementPercentageByYear: SortOrderInput
  salesAchievementPercentageByYear_forNewHire: SortOrderInput
  salesAchivementPercentageByQuarter_forNewHire: SortOrderInput
  salesByMonth: SortOrderInput
  salesByMonth_forNewHire: SortOrderInput
  salesByQuarter: SortOrderInput
  salesByQuarter_forNewHire: SortOrderInput
  salesByYear: SortOrderInput
  salesByYear_forNewHire: SortOrderInput
  salesRepEmail: SortOrderInput
  sipEligibility: SortOrderInput
  targetByMonth: SortOrderInput
  targetByQuarter: SortOrderInput
  targetByYear: SortOrderInput
  targetByYearUSD: SortOrderInput
  territoryCategory: SortOrderInput
  updatedAt: SortOrderInput
  variablePayByMonth: SortOrderInput
  variablePayByQuarter: SortOrderInput
  variablePayByYear: SortOrderInput
  variablePayQ5: SortOrderInput
  variablePayoutByQuarter: SortOrderInput
  variablePayoutByQuarter_forNewHire: SortOrderInput
  variablePayoutPercentageByQuarter: SortOrderInput
  variablePayoutPercentageByQuarter_forNewHire: SortOrderInput
  variablePayoutPercentageByYear: SortOrderInput
  variablePayoutPercentageQ5: SortOrderInput
  variablePayoutPercentageQ5_forNewHire: SortOrderInput
  variablePayoutQ5: SortOrderInput
  variablePayoutQ5_forNewHire: SortOrderInput
  year: SortOrderInput
}

input SalesOrderByWithRelationInput {
  additionalPayout: SortOrderInput
  additionalPayoutCE: SortOrderInput
  additionalPayoutSC: SortOrderInput
  commissionPayoutByQuarter: SortOrderInput
  commissionPayoutByQuarter_forNewHire: SortOrderInput
  commissionPayoutQ5: SortOrderInput
  commissionPayoutQ5_forNewHire: SortOrderInput
  commissionPercentageByQuarter: SortOrderInput
  commissionPercentageByQuarter_forNewHire: SortOrderInput
  commissionPercentageQ5: SortOrderInput
  commissionPercentageQ5_forNewHire: SortOrderInput
  createdAt: SortOrderInput
  currency: SortOrderInput
  earlyBird: SortOrderInput
  earlyBirdEligibility: SortOrderInput
  guaranttedPayout: SortOrderInput
  id: SortOrder
  kicker: SortOrderInput
  mixedBag: SortOrderInput
  month: SortOrderInput
  newHire: SortOrderInput
  productType: SortOrderInput
  quarter: SortOrderInput
  salesAchievementPercentageByMonth: SortOrderInput
  salesAchievementPercentageByQuarter: SortOrderInput
  salesAchievementPercentageByYear: SortOrderInput
  salesAchievementPercentageByYear_forNewHire: SortOrderInput
  salesAchivementPercentageByQuarter_forNewHire: SortOrderInput
  salesByMonth: SortOrderInput
  salesByMonth_forNewHire: SortOrderInput
  salesByQuarter: SortOrderInput
  salesByQuarter_forNewHire: SortOrderInput
  salesByYear: SortOrderInput
  salesByYear_forNewHire: SortOrderInput
  salesRepEmail: SortOrderInput
  sipEligibility: SortOrderInput
  targetByMonth: SortOrderInput
  targetByQuarter: SortOrderInput
  targetByYear: SortOrderInput
  targetByYearUSD: SortOrderInput
  territoryCategory: SortOrderInput
  updatedAt: SortOrderInput
  variablePayByMonth: SortOrderInput
  variablePayByQuarter: SortOrderInput
  variablePayByYear: SortOrderInput
  variablePayQ5: SortOrderInput
  variablePayoutByQuarter: SortOrderInput
  variablePayoutByQuarter_forNewHire: SortOrderInput
  variablePayoutPercentageByQuarter: SortOrderInput
  variablePayoutPercentageByQuarter_forNewHire: SortOrderInput
  variablePayoutPercentageByYear: SortOrderInput
  variablePayoutPercentageQ5: SortOrderInput
  variablePayoutPercentageQ5_forNewHire: SortOrderInput
  variablePayoutQ5: SortOrderInput
  variablePayoutQ5_forNewHire: SortOrderInput
  year: SortOrderInput
}

enum SalesScalarFieldEnum {
  additionalPayout
  additionalPayoutCE
  additionalPayoutSC
  commissionPayoutByQuarter
  commissionPayoutByQuarter_forNewHire
  commissionPayoutQ5
  commissionPayoutQ5_forNewHire
  commissionPercentageByQuarter
  commissionPercentageByQuarter_forNewHire
  commissionPercentageQ5
  commissionPercentageQ5_forNewHire
  createdAt
  currency
  earlyBird
  earlyBirdEligibility
  guaranttedPayout
  id
  kicker
  mixedBag
  month
  newHire
  productType
  quarter
  salesAchievementPercentageByMonth
  salesAchievementPercentageByQuarter
  salesAchievementPercentageByYear
  salesAchievementPercentageByYear_forNewHire
  salesAchivementPercentageByQuarter_forNewHire
  salesByMonth
  salesByMonth_forNewHire
  salesByQuarter
  salesByQuarter_forNewHire
  salesByYear
  salesByYear_forNewHire
  salesRepEmail
  sipEligibility
  targetByMonth
  targetByQuarter
  targetByYear
  targetByYearUSD
  territoryCategory
  updatedAt
  variablePayByMonth
  variablePayByQuarter
  variablePayByYear
  variablePayQ5
  variablePayoutByQuarter
  variablePayoutByQuarter_forNewHire
  variablePayoutPercentageByQuarter
  variablePayoutPercentageByQuarter_forNewHire
  variablePayoutPercentageByYear
  variablePayoutPercentageQ5
  variablePayoutPercentageQ5_forNewHire
  variablePayoutQ5
  variablePayoutQ5_forNewHire
  year
}

input SalesScalarWhereWithAggregatesInput {
  AND: [SalesScalarWhereWithAggregatesInput]
  NOT: [SalesScalarWhereWithAggregatesInput]
  OR: [SalesScalarWhereWithAggregatesInput]
  additionalPayout: StringNullableWithAggregatesFilter
  additionalPayoutCE: StringNullableWithAggregatesFilter
  additionalPayoutSC: StringNullableWithAggregatesFilter
  commissionPayoutByQuarter: StringNullableWithAggregatesFilter
  commissionPayoutByQuarter_forNewHire: StringNullableWithAggregatesFilter
  commissionPayoutQ5: StringNullableWithAggregatesFilter
  commissionPayoutQ5_forNewHire: StringNullableWithAggregatesFilter
  commissionPercentageByQuarter: StringNullableWithAggregatesFilter
  commissionPercentageByQuarter_forNewHire: StringNullableWithAggregatesFilter
  commissionPercentageQ5: StringNullableWithAggregatesFilter
  commissionPercentageQ5_forNewHire: StringNullableWithAggregatesFilter
  createdAt: DateTimeNullableWithAggregatesFilter
  currency: StringNullableWithAggregatesFilter
  earlyBird: StringNullableWithAggregatesFilter
  earlyBirdEligibility: StringNullableWithAggregatesFilter
  guaranttedPayout: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  kicker: StringNullableWithAggregatesFilter
  mixedBag: StringNullableWithAggregatesFilter
  month: StringNullableWithAggregatesFilter
  newHire: StringNullableWithAggregatesFilter
  productType: StringNullableWithAggregatesFilter
  quarter: StringNullableWithAggregatesFilter
  salesAchievementPercentageByMonth: StringNullableWithAggregatesFilter
  salesAchievementPercentageByQuarter: StringNullableWithAggregatesFilter
  salesAchievementPercentageByYear: StringNullableWithAggregatesFilter
  salesAchievementPercentageByYear_forNewHire: StringNullableWithAggregatesFilter
  salesAchivementPercentageByQuarter_forNewHire: StringNullableWithAggregatesFilter
  salesByMonth: StringNullableWithAggregatesFilter
  salesByMonth_forNewHire: StringNullableWithAggregatesFilter
  salesByQuarter: StringNullableWithAggregatesFilter
  salesByQuarter_forNewHire: StringNullableWithAggregatesFilter
  salesByYear: StringNullableWithAggregatesFilter
  salesByYear_forNewHire: StringNullableWithAggregatesFilter
  salesRepEmail: StringNullableWithAggregatesFilter
  sipEligibility: StringNullableWithAggregatesFilter
  targetByMonth: StringNullableWithAggregatesFilter
  targetByQuarter: StringNullableWithAggregatesFilter
  targetByYear: StringNullableWithAggregatesFilter
  targetByYearUSD: StringNullableWithAggregatesFilter
  territoryCategory: StringNullableWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
  variablePayByMonth: StringNullableWithAggregatesFilter
  variablePayByQuarter: StringNullableWithAggregatesFilter
  variablePayByYear: StringNullableWithAggregatesFilter
  variablePayQ5: StringNullableWithAggregatesFilter
  variablePayoutByQuarter: StringNullableWithAggregatesFilter
  variablePayoutByQuarter_forNewHire: StringNullableWithAggregatesFilter
  variablePayoutPercentageByQuarter: StringNullableWithAggregatesFilter
  variablePayoutPercentageByQuarter_forNewHire: StringNullableWithAggregatesFilter
  variablePayoutPercentageByYear: StringNullableWithAggregatesFilter
  variablePayoutPercentageQ5: StringNullableWithAggregatesFilter
  variablePayoutPercentageQ5_forNewHire: StringNullableWithAggregatesFilter
  variablePayoutQ5: StringNullableWithAggregatesFilter
  variablePayoutQ5_forNewHire: StringNullableWithAggregatesFilter
  year: StringNullableWithAggregatesFilter
}

type SalesSumAggregateOutputType {
  id: Int
}

input SalesSumOrderByAggregateInput {
  id: SortOrder
}

input SalesUncheckedCreateInput {
  additionalPayout: String
  additionalPayoutCE: String
  additionalPayoutSC: String
  commissionPayoutByQuarter: String
  commissionPayoutByQuarter_forNewHire: String
  commissionPayoutQ5: String
  commissionPayoutQ5_forNewHire: String
  commissionPercentageByQuarter: String
  commissionPercentageByQuarter_forNewHire: String
  commissionPercentageQ5: String
  commissionPercentageQ5_forNewHire: String
  createdAt: DateTime
  currency: String
  earlyBird: String
  earlyBirdEligibility: String
  guaranttedPayout: String
  id: Int
  kicker: String
  mixedBag: String
  month: String
  newHire: String
  productType: String
  quarter: String
  salesAchievementPercentageByMonth: String
  salesAchievementPercentageByQuarter: String
  salesAchievementPercentageByYear: String
  salesAchievementPercentageByYear_forNewHire: String
  salesAchivementPercentageByQuarter_forNewHire: String
  salesByMonth: String
  salesByMonth_forNewHire: String
  salesByQuarter: String
  salesByQuarter_forNewHire: String
  salesByYear: String
  salesByYear_forNewHire: String
  salesRepEmail: String
  sipEligibility: String
  targetByMonth: String
  targetByQuarter: String
  targetByYear: String
  targetByYearUSD: String
  territoryCategory: String
  updatedAt: DateTime
  variablePayByMonth: String
  variablePayByQuarter: String
  variablePayByYear: String
  variablePayQ5: String
  variablePayoutByQuarter: String
  variablePayoutByQuarter_forNewHire: String
  variablePayoutPercentageByQuarter: String
  variablePayoutPercentageByQuarter_forNewHire: String
  variablePayoutPercentageByYear: String
  variablePayoutPercentageQ5: String
  variablePayoutPercentageQ5_forNewHire: String
  variablePayoutQ5: String
  variablePayoutQ5_forNewHire: String
  year: String
}

input SalesUncheckedUpdateInput {
  additionalPayout: NullableStringFieldUpdateOperationsInput
  additionalPayoutCE: NullableStringFieldUpdateOperationsInput
  additionalPayoutSC: NullableStringFieldUpdateOperationsInput
  commissionPayoutByQuarter: NullableStringFieldUpdateOperationsInput
  commissionPayoutByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  commissionPayoutQ5: NullableStringFieldUpdateOperationsInput
  commissionPayoutQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  commissionPercentageByQuarter: NullableStringFieldUpdateOperationsInput
  commissionPercentageByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  commissionPercentageQ5: NullableStringFieldUpdateOperationsInput
  commissionPercentageQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  currency: NullableStringFieldUpdateOperationsInput
  earlyBird: NullableStringFieldUpdateOperationsInput
  earlyBirdEligibility: NullableStringFieldUpdateOperationsInput
  guaranttedPayout: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  kicker: NullableStringFieldUpdateOperationsInput
  mixedBag: NullableStringFieldUpdateOperationsInput
  month: NullableStringFieldUpdateOperationsInput
  newHire: NullableStringFieldUpdateOperationsInput
  productType: NullableStringFieldUpdateOperationsInput
  quarter: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByMonth: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByQuarter: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByYear: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByYear_forNewHire: NullableStringFieldUpdateOperationsInput
  salesAchivementPercentageByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  salesByMonth: NullableStringFieldUpdateOperationsInput
  salesByMonth_forNewHire: NullableStringFieldUpdateOperationsInput
  salesByQuarter: NullableStringFieldUpdateOperationsInput
  salesByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  salesByYear: NullableStringFieldUpdateOperationsInput
  salesByYear_forNewHire: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  sipEligibility: NullableStringFieldUpdateOperationsInput
  targetByMonth: NullableStringFieldUpdateOperationsInput
  targetByQuarter: NullableStringFieldUpdateOperationsInput
  targetByYear: NullableStringFieldUpdateOperationsInput
  targetByYearUSD: NullableStringFieldUpdateOperationsInput
  territoryCategory: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  variablePayByMonth: NullableStringFieldUpdateOperationsInput
  variablePayByQuarter: NullableStringFieldUpdateOperationsInput
  variablePayByYear: NullableStringFieldUpdateOperationsInput
  variablePayQ5: NullableStringFieldUpdateOperationsInput
  variablePayoutByQuarter: NullableStringFieldUpdateOperationsInput
  variablePayoutByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageByQuarter: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageByYear: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageQ5: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  variablePayoutQ5: NullableStringFieldUpdateOperationsInput
  variablePayoutQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input SalesUncheckedUpdateManyInput {
  additionalPayout: NullableStringFieldUpdateOperationsInput
  additionalPayoutCE: NullableStringFieldUpdateOperationsInput
  additionalPayoutSC: NullableStringFieldUpdateOperationsInput
  commissionPayoutByQuarter: NullableStringFieldUpdateOperationsInput
  commissionPayoutByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  commissionPayoutQ5: NullableStringFieldUpdateOperationsInput
  commissionPayoutQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  commissionPercentageByQuarter: NullableStringFieldUpdateOperationsInput
  commissionPercentageByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  commissionPercentageQ5: NullableStringFieldUpdateOperationsInput
  commissionPercentageQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  currency: NullableStringFieldUpdateOperationsInput
  earlyBird: NullableStringFieldUpdateOperationsInput
  earlyBirdEligibility: NullableStringFieldUpdateOperationsInput
  guaranttedPayout: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  kicker: NullableStringFieldUpdateOperationsInput
  mixedBag: NullableStringFieldUpdateOperationsInput
  month: NullableStringFieldUpdateOperationsInput
  newHire: NullableStringFieldUpdateOperationsInput
  productType: NullableStringFieldUpdateOperationsInput
  quarter: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByMonth: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByQuarter: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByYear: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByYear_forNewHire: NullableStringFieldUpdateOperationsInput
  salesAchivementPercentageByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  salesByMonth: NullableStringFieldUpdateOperationsInput
  salesByMonth_forNewHire: NullableStringFieldUpdateOperationsInput
  salesByQuarter: NullableStringFieldUpdateOperationsInput
  salesByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  salesByYear: NullableStringFieldUpdateOperationsInput
  salesByYear_forNewHire: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  sipEligibility: NullableStringFieldUpdateOperationsInput
  targetByMonth: NullableStringFieldUpdateOperationsInput
  targetByQuarter: NullableStringFieldUpdateOperationsInput
  targetByYear: NullableStringFieldUpdateOperationsInput
  targetByYearUSD: NullableStringFieldUpdateOperationsInput
  territoryCategory: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  variablePayByMonth: NullableStringFieldUpdateOperationsInput
  variablePayByQuarter: NullableStringFieldUpdateOperationsInput
  variablePayByYear: NullableStringFieldUpdateOperationsInput
  variablePayQ5: NullableStringFieldUpdateOperationsInput
  variablePayoutByQuarter: NullableStringFieldUpdateOperationsInput
  variablePayoutByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageByQuarter: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageByYear: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageQ5: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  variablePayoutQ5: NullableStringFieldUpdateOperationsInput
  variablePayoutQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input SalesUpdateInput {
  additionalPayout: NullableStringFieldUpdateOperationsInput
  additionalPayoutCE: NullableStringFieldUpdateOperationsInput
  additionalPayoutSC: NullableStringFieldUpdateOperationsInput
  commissionPayoutByQuarter: NullableStringFieldUpdateOperationsInput
  commissionPayoutByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  commissionPayoutQ5: NullableStringFieldUpdateOperationsInput
  commissionPayoutQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  commissionPercentageByQuarter: NullableStringFieldUpdateOperationsInput
  commissionPercentageByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  commissionPercentageQ5: NullableStringFieldUpdateOperationsInput
  commissionPercentageQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  currency: NullableStringFieldUpdateOperationsInput
  earlyBird: NullableStringFieldUpdateOperationsInput
  earlyBirdEligibility: NullableStringFieldUpdateOperationsInput
  guaranttedPayout: NullableStringFieldUpdateOperationsInput
  kicker: NullableStringFieldUpdateOperationsInput
  mixedBag: NullableStringFieldUpdateOperationsInput
  month: NullableStringFieldUpdateOperationsInput
  newHire: NullableStringFieldUpdateOperationsInput
  productType: NullableStringFieldUpdateOperationsInput
  quarter: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByMonth: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByQuarter: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByYear: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByYear_forNewHire: NullableStringFieldUpdateOperationsInput
  salesAchivementPercentageByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  salesByMonth: NullableStringFieldUpdateOperationsInput
  salesByMonth_forNewHire: NullableStringFieldUpdateOperationsInput
  salesByQuarter: NullableStringFieldUpdateOperationsInput
  salesByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  salesByYear: NullableStringFieldUpdateOperationsInput
  salesByYear_forNewHire: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  sipEligibility: NullableStringFieldUpdateOperationsInput
  targetByMonth: NullableStringFieldUpdateOperationsInput
  targetByQuarter: NullableStringFieldUpdateOperationsInput
  targetByYear: NullableStringFieldUpdateOperationsInput
  targetByYearUSD: NullableStringFieldUpdateOperationsInput
  territoryCategory: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  variablePayByMonth: NullableStringFieldUpdateOperationsInput
  variablePayByQuarter: NullableStringFieldUpdateOperationsInput
  variablePayByYear: NullableStringFieldUpdateOperationsInput
  variablePayQ5: NullableStringFieldUpdateOperationsInput
  variablePayoutByQuarter: NullableStringFieldUpdateOperationsInput
  variablePayoutByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageByQuarter: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageByYear: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageQ5: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  variablePayoutQ5: NullableStringFieldUpdateOperationsInput
  variablePayoutQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input SalesUpdateManyMutationInput {
  additionalPayout: NullableStringFieldUpdateOperationsInput
  additionalPayoutCE: NullableStringFieldUpdateOperationsInput
  additionalPayoutSC: NullableStringFieldUpdateOperationsInput
  commissionPayoutByQuarter: NullableStringFieldUpdateOperationsInput
  commissionPayoutByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  commissionPayoutQ5: NullableStringFieldUpdateOperationsInput
  commissionPayoutQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  commissionPercentageByQuarter: NullableStringFieldUpdateOperationsInput
  commissionPercentageByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  commissionPercentageQ5: NullableStringFieldUpdateOperationsInput
  commissionPercentageQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  currency: NullableStringFieldUpdateOperationsInput
  earlyBird: NullableStringFieldUpdateOperationsInput
  earlyBirdEligibility: NullableStringFieldUpdateOperationsInput
  guaranttedPayout: NullableStringFieldUpdateOperationsInput
  kicker: NullableStringFieldUpdateOperationsInput
  mixedBag: NullableStringFieldUpdateOperationsInput
  month: NullableStringFieldUpdateOperationsInput
  newHire: NullableStringFieldUpdateOperationsInput
  productType: NullableStringFieldUpdateOperationsInput
  quarter: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByMonth: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByQuarter: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByYear: NullableStringFieldUpdateOperationsInput
  salesAchievementPercentageByYear_forNewHire: NullableStringFieldUpdateOperationsInput
  salesAchivementPercentageByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  salesByMonth: NullableStringFieldUpdateOperationsInput
  salesByMonth_forNewHire: NullableStringFieldUpdateOperationsInput
  salesByQuarter: NullableStringFieldUpdateOperationsInput
  salesByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  salesByYear: NullableStringFieldUpdateOperationsInput
  salesByYear_forNewHire: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  sipEligibility: NullableStringFieldUpdateOperationsInput
  targetByMonth: NullableStringFieldUpdateOperationsInput
  targetByQuarter: NullableStringFieldUpdateOperationsInput
  targetByYear: NullableStringFieldUpdateOperationsInput
  targetByYearUSD: NullableStringFieldUpdateOperationsInput
  territoryCategory: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  variablePayByMonth: NullableStringFieldUpdateOperationsInput
  variablePayByQuarter: NullableStringFieldUpdateOperationsInput
  variablePayByYear: NullableStringFieldUpdateOperationsInput
  variablePayQ5: NullableStringFieldUpdateOperationsInput
  variablePayoutByQuarter: NullableStringFieldUpdateOperationsInput
  variablePayoutByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageByQuarter: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageByQuarter_forNewHire: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageByYear: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageQ5: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentageQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  variablePayoutQ5: NullableStringFieldUpdateOperationsInput
  variablePayoutQ5_forNewHire: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input SalesWhereInput {
  AND: [SalesWhereInput]
  NOT: [SalesWhereInput]
  OR: [SalesWhereInput]
  additionalPayout: StringNullableFilter
  additionalPayoutCE: StringNullableFilter
  additionalPayoutSC: StringNullableFilter
  commissionPayoutByQuarter: StringNullableFilter
  commissionPayoutByQuarter_forNewHire: StringNullableFilter
  commissionPayoutQ5: StringNullableFilter
  commissionPayoutQ5_forNewHire: StringNullableFilter
  commissionPercentageByQuarter: StringNullableFilter
  commissionPercentageByQuarter_forNewHire: StringNullableFilter
  commissionPercentageQ5: StringNullableFilter
  commissionPercentageQ5_forNewHire: StringNullableFilter
  createdAt: DateTimeNullableFilter
  currency: StringNullableFilter
  earlyBird: StringNullableFilter
  earlyBirdEligibility: StringNullableFilter
  guaranttedPayout: StringNullableFilter
  id: IntFilter
  kicker: StringNullableFilter
  mixedBag: StringNullableFilter
  month: StringNullableFilter
  newHire: StringNullableFilter
  productType: StringNullableFilter
  quarter: StringNullableFilter
  salesAchievementPercentageByMonth: StringNullableFilter
  salesAchievementPercentageByQuarter: StringNullableFilter
  salesAchievementPercentageByYear: StringNullableFilter
  salesAchievementPercentageByYear_forNewHire: StringNullableFilter
  salesAchivementPercentageByQuarter_forNewHire: StringNullableFilter
  salesByMonth: StringNullableFilter
  salesByMonth_forNewHire: StringNullableFilter
  salesByQuarter: StringNullableFilter
  salesByQuarter_forNewHire: StringNullableFilter
  salesByYear: StringNullableFilter
  salesByYear_forNewHire: StringNullableFilter
  salesRepEmail: StringNullableFilter
  sipEligibility: StringNullableFilter
  targetByMonth: StringNullableFilter
  targetByQuarter: StringNullableFilter
  targetByYear: StringNullableFilter
  targetByYearUSD: StringNullableFilter
  territoryCategory: StringNullableFilter
  updatedAt: DateTimeNullableFilter
  variablePayByMonth: StringNullableFilter
  variablePayByQuarter: StringNullableFilter
  variablePayByYear: StringNullableFilter
  variablePayQ5: StringNullableFilter
  variablePayoutByQuarter: StringNullableFilter
  variablePayoutByQuarter_forNewHire: StringNullableFilter
  variablePayoutPercentageByQuarter: StringNullableFilter
  variablePayoutPercentageByQuarter_forNewHire: StringNullableFilter
  variablePayoutPercentageByYear: StringNullableFilter
  variablePayoutPercentageQ5: StringNullableFilter
  variablePayoutPercentageQ5_forNewHire: StringNullableFilter
  variablePayoutQ5: StringNullableFilter
  variablePayoutQ5_forNewHire: StringNullableFilter
  year: StringNullableFilter
}

input SalesWhereUniqueInput {
  AND: [SalesWhereInput]
  NOT: [SalesWhereInput]
  OR: [SalesWhereInput]
  additionalPayout: StringNullableFilter
  additionalPayoutCE: StringNullableFilter
  additionalPayoutSC: StringNullableFilter
  commissionPayoutByQuarter: StringNullableFilter
  commissionPayoutByQuarter_forNewHire: StringNullableFilter
  commissionPayoutQ5: StringNullableFilter
  commissionPayoutQ5_forNewHire: StringNullableFilter
  commissionPercentageByQuarter: StringNullableFilter
  commissionPercentageByQuarter_forNewHire: StringNullableFilter
  commissionPercentageQ5: StringNullableFilter
  commissionPercentageQ5_forNewHire: StringNullableFilter
  createdAt: DateTimeNullableFilter
  currency: StringNullableFilter
  earlyBird: StringNullableFilter
  earlyBirdEligibility: StringNullableFilter
  guaranttedPayout: StringNullableFilter
  id: Int
  kicker: StringNullableFilter
  mixedBag: StringNullableFilter
  month: StringNullableFilter
  newHire: StringNullableFilter
  productType: StringNullableFilter
  quarter: StringNullableFilter
  salesAchievementPercentageByMonth: StringNullableFilter
  salesAchievementPercentageByQuarter: StringNullableFilter
  salesAchievementPercentageByYear: StringNullableFilter
  salesAchievementPercentageByYear_forNewHire: StringNullableFilter
  salesAchivementPercentageByQuarter_forNewHire: StringNullableFilter
  salesByMonth: StringNullableFilter
  salesByMonth_forNewHire: StringNullableFilter
  salesByQuarter: StringNullableFilter
  salesByQuarter_forNewHire: StringNullableFilter
  salesByYear: StringNullableFilter
  salesByYear_forNewHire: StringNullableFilter
  salesRepEmail: StringNullableFilter
  sipEligibility: StringNullableFilter
  targetByMonth: StringNullableFilter
  targetByQuarter: StringNullableFilter
  targetByYear: StringNullableFilter
  targetByYearUSD: StringNullableFilter
  territoryCategory: StringNullableFilter
  updatedAt: DateTimeNullableFilter
  variablePayByMonth: StringNullableFilter
  variablePayByQuarter: StringNullableFilter
  variablePayByYear: StringNullableFilter
  variablePayQ5: StringNullableFilter
  variablePayoutByQuarter: StringNullableFilter
  variablePayoutByQuarter_forNewHire: StringNullableFilter
  variablePayoutPercentageByQuarter: StringNullableFilter
  variablePayoutPercentageByQuarter_forNewHire: StringNullableFilter
  variablePayoutPercentageByYear: StringNullableFilter
  variablePayoutPercentageQ5: StringNullableFilter
  variablePayoutPercentageQ5_forNewHire: StringNullableFilter
  variablePayoutQ5: StringNullableFilter
  variablePayoutQ5_forNewHire: StringNullableFilter
  year: StringNullableFilter
}

type Schema {
  enums: [Enum!]!
  models: [Model!]!
}

type SearchHistory {
  createdAt: DateTime
  id: String!
  salesRepEmail: String
  searchQuery: String
  searchResults: [Json!]!
  searchType: [SearchType!]!
  updatedAt: DateTime
}

type SearchHistoryCountAggregateOutputType {
  _all: Int!
  createdAt: Int!
  id: Int!
  salesRepEmail: Int!
  searchQuery: Int!
  searchResults: Int!
  searchType: Int!
  updatedAt: Int!
}

input SearchHistoryCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  salesRepEmail: SortOrder
  searchQuery: SortOrder
  searchResults: SortOrder
  searchType: SortOrder
  updatedAt: SortOrder
}

input SearchHistoryCreateInput {
  createdAt: DateTime
  id: String
  salesRepEmail: String
  searchQuery: String
  searchResults: [Json]
  searchType: [SearchType]
  updatedAt: DateTime
}

input SearchHistoryCreateManyInput {
  createdAt: DateTime
  id: String
  salesRepEmail: String
  searchQuery: String
  searchResults: [Json]
  searchType: [SearchType]
  updatedAt: DateTime
}

input SearchHistoryCreatesearchResultsInput {
  set: Json!
}

input SearchHistoryCreatesearchTypeInput {
  set: SearchType!
}

type SearchHistoryMaxAggregateOutputType {
  createdAt: DateTime
  id: String
  salesRepEmail: String
  searchQuery: String
  updatedAt: DateTime
}

input SearchHistoryMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  salesRepEmail: SortOrder
  searchQuery: SortOrder
  updatedAt: SortOrder
}

type SearchHistoryMinAggregateOutputType {
  createdAt: DateTime
  id: String
  salesRepEmail: String
  searchQuery: String
  updatedAt: DateTime
}

input SearchHistoryMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  salesRepEmail: SortOrder
  searchQuery: SortOrder
  updatedAt: SortOrder
}

input SearchHistoryOrderByWithAggregationInput {
  _count: SearchHistoryCountOrderByAggregateInput
  _max: SearchHistoryMaxOrderByAggregateInput
  _min: SearchHistoryMinOrderByAggregateInput
  createdAt: SortOrderInput
  id: SortOrder
  salesRepEmail: SortOrderInput
  searchQuery: SortOrderInput
  searchResults: SortOrder
  searchType: SortOrder
  updatedAt: SortOrderInput
}

input SearchHistoryOrderByWithRelationInput {
  createdAt: SortOrderInput
  id: SortOrder
  salesRepEmail: SortOrderInput
  searchQuery: SortOrderInput
  searchResults: SortOrder
  searchType: SortOrder
  updatedAt: SortOrderInput
}

enum SearchHistoryScalarFieldEnum {
  createdAt
  id
  salesRepEmail
  searchQuery
  searchResults
  searchType
  updatedAt
}

input SearchHistoryScalarWhereWithAggregatesInput {
  AND: [SearchHistoryScalarWhereWithAggregatesInput]
  NOT: [SearchHistoryScalarWhereWithAggregatesInput]
  OR: [SearchHistoryScalarWhereWithAggregatesInput]
  createdAt: DateTimeNullableWithAggregatesFilter
  id: UuidWithAggregatesFilter
  salesRepEmail: StringNullableWithAggregatesFilter
  searchQuery: StringNullableWithAggregatesFilter
  searchResults: JsonNullableListFilter
  searchType: EnumSearchTypeNullableListFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input SearchHistoryUncheckedCreateInput {
  createdAt: DateTime
  id: String
  salesRepEmail: String
  searchQuery: String
  searchResults: [Json]
  searchType: [SearchType]
  updatedAt: DateTime
}

input SearchHistoryUncheckedUpdateInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  searchQuery: NullableStringFieldUpdateOperationsInput
  searchResults: [Json]
  searchType: [SearchType]
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input SearchHistoryUncheckedUpdateManyInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  searchQuery: NullableStringFieldUpdateOperationsInput
  searchResults: [Json]
  searchType: [SearchType]
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input SearchHistoryUpdateInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  searchQuery: NullableStringFieldUpdateOperationsInput
  searchResults: [Json]
  searchType: [SearchType]
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input SearchHistoryUpdateManyMutationInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  searchQuery: NullableStringFieldUpdateOperationsInput
  searchResults: [Json]
  searchType: [SearchType]
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input SearchHistoryUpdatesearchResultsInput {
  push: [Json]
  set: [Json]
}

input SearchHistoryUpdatesearchTypeInput {
  push: [SearchType]
  set: [SearchType]
}

input SearchHistoryWhereInput {
  AND: [SearchHistoryWhereInput]
  NOT: [SearchHistoryWhereInput]
  OR: [SearchHistoryWhereInput]
  createdAt: DateTimeNullableFilter
  id: UuidFilter
  salesRepEmail: StringNullableFilter
  searchQuery: StringNullableFilter
  searchResults: JsonNullableListFilter
  searchType: EnumSearchTypeNullableListFilter
  updatedAt: DateTimeNullableFilter
}

input SearchHistoryWhereUniqueInput {
  AND: [SearchHistoryWhereInput]
  NOT: [SearchHistoryWhereInput]
  OR: [SearchHistoryWhereInput]
  createdAt: DateTimeNullableFilter
  id: String
  salesRepEmail: StringNullableFilter
  searchQuery: StringNullableFilter
  searchResults: JsonNullableListFilter
  searchType: EnumSearchTypeNullableListFilter
  updatedAt: DateTimeNullableFilter
}

enum SearchType {
  CaseLog
  ContactSearch
  PlanCall
}

type SliderAndCommission {
  commissionPercentage: String
  id: Int!
  lowerBound: String
  territoryCategory: String
  upperBound: String
  variablePayoutPercentage: String
  year: String
}

type SliderAndCommissionAvgAggregateOutputType {
  id: Float
}

input SliderAndCommissionAvgOrderByAggregateInput {
  id: SortOrder
}

type SliderAndCommissionCountAggregateOutputType {
  _all: Int!
  commissionPercentage: Int!
  id: Int!
  lowerBound: Int!
  territoryCategory: Int!
  upperBound: Int!
  variablePayoutPercentage: Int!
  year: Int!
}

input SliderAndCommissionCountOrderByAggregateInput {
  commissionPercentage: SortOrder
  id: SortOrder
  lowerBound: SortOrder
  territoryCategory: SortOrder
  upperBound: SortOrder
  variablePayoutPercentage: SortOrder
  year: SortOrder
}

input SliderAndCommissionCreateInput {
  commissionPercentage: String
  lowerBound: String
  territoryCategory: String
  upperBound: String
  variablePayoutPercentage: String
  year: String
}

input SliderAndCommissionCreateManyInput {
  commissionPercentage: String
  id: Int
  lowerBound: String
  territoryCategory: String
  upperBound: String
  variablePayoutPercentage: String
  year: String
}

type SliderAndCommissionMaxAggregateOutputType {
  commissionPercentage: String
  id: Int
  lowerBound: String
  territoryCategory: String
  upperBound: String
  variablePayoutPercentage: String
  year: String
}

input SliderAndCommissionMaxOrderByAggregateInput {
  commissionPercentage: SortOrder
  id: SortOrder
  lowerBound: SortOrder
  territoryCategory: SortOrder
  upperBound: SortOrder
  variablePayoutPercentage: SortOrder
  year: SortOrder
}

type SliderAndCommissionMinAggregateOutputType {
  commissionPercentage: String
  id: Int
  lowerBound: String
  territoryCategory: String
  upperBound: String
  variablePayoutPercentage: String
  year: String
}

input SliderAndCommissionMinOrderByAggregateInput {
  commissionPercentage: SortOrder
  id: SortOrder
  lowerBound: SortOrder
  territoryCategory: SortOrder
  upperBound: SortOrder
  variablePayoutPercentage: SortOrder
  year: SortOrder
}

input SliderAndCommissionOrderByWithAggregationInput {
  _avg: SliderAndCommissionAvgOrderByAggregateInput
  _count: SliderAndCommissionCountOrderByAggregateInput
  _max: SliderAndCommissionMaxOrderByAggregateInput
  _min: SliderAndCommissionMinOrderByAggregateInput
  _sum: SliderAndCommissionSumOrderByAggregateInput
  commissionPercentage: SortOrderInput
  id: SortOrder
  lowerBound: SortOrderInput
  territoryCategory: SortOrderInput
  upperBound: SortOrderInput
  variablePayoutPercentage: SortOrderInput
  year: SortOrderInput
}

input SliderAndCommissionOrderByWithRelationInput {
  commissionPercentage: SortOrderInput
  id: SortOrder
  lowerBound: SortOrderInput
  territoryCategory: SortOrderInput
  upperBound: SortOrderInput
  variablePayoutPercentage: SortOrderInput
  year: SortOrderInput
}

enum SliderAndCommissionScalarFieldEnum {
  commissionPercentage
  id
  lowerBound
  territoryCategory
  upperBound
  variablePayoutPercentage
  year
}

input SliderAndCommissionScalarWhereWithAggregatesInput {
  AND: [SliderAndCommissionScalarWhereWithAggregatesInput]
  NOT: [SliderAndCommissionScalarWhereWithAggregatesInput]
  OR: [SliderAndCommissionScalarWhereWithAggregatesInput]
  commissionPercentage: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  lowerBound: StringNullableWithAggregatesFilter
  territoryCategory: StringNullableWithAggregatesFilter
  upperBound: StringNullableWithAggregatesFilter
  variablePayoutPercentage: StringNullableWithAggregatesFilter
  year: StringNullableWithAggregatesFilter
}

type SliderAndCommissionSumAggregateOutputType {
  id: Int
}

input SliderAndCommissionSumOrderByAggregateInput {
  id: SortOrder
}

input SliderAndCommissionUncheckedCreateInput {
  commissionPercentage: String
  id: Int
  lowerBound: String
  territoryCategory: String
  upperBound: String
  variablePayoutPercentage: String
  year: String
}

input SliderAndCommissionUncheckedUpdateInput {
  commissionPercentage: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  lowerBound: NullableStringFieldUpdateOperationsInput
  territoryCategory: NullableStringFieldUpdateOperationsInput
  upperBound: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentage: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input SliderAndCommissionUncheckedUpdateManyInput {
  commissionPercentage: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  lowerBound: NullableStringFieldUpdateOperationsInput
  territoryCategory: NullableStringFieldUpdateOperationsInput
  upperBound: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentage: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input SliderAndCommissionUpdateInput {
  commissionPercentage: NullableStringFieldUpdateOperationsInput
  lowerBound: NullableStringFieldUpdateOperationsInput
  territoryCategory: NullableStringFieldUpdateOperationsInput
  upperBound: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentage: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input SliderAndCommissionUpdateManyMutationInput {
  commissionPercentage: NullableStringFieldUpdateOperationsInput
  lowerBound: NullableStringFieldUpdateOperationsInput
  territoryCategory: NullableStringFieldUpdateOperationsInput
  upperBound: NullableStringFieldUpdateOperationsInput
  variablePayoutPercentage: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input SliderAndCommissionWhereInput {
  AND: [SliderAndCommissionWhereInput]
  NOT: [SliderAndCommissionWhereInput]
  OR: [SliderAndCommissionWhereInput]
  commissionPercentage: StringNullableFilter
  id: IntFilter
  lowerBound: StringNullableFilter
  territoryCategory: StringNullableFilter
  upperBound: StringNullableFilter
  variablePayoutPercentage: StringNullableFilter
  year: StringNullableFilter
}

input SliderAndCommissionWhereUniqueInput {
  AND: [SliderAndCommissionWhereInput]
  NOT: [SliderAndCommissionWhereInput]
  OR: [SliderAndCommissionWhereInput]
  commissionPercentage: StringNullableFilter
  id: Int
  lowerBound: StringNullableFilter
  territoryCategory: StringNullableFilter
  upperBound: StringNullableFilter
  variablePayoutPercentage: StringNullableFilter
  year: StringNullableFilter
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input StringNullableListFilter {
  equals: [String]
  has: String
  hasEvery: [String]
  hasSome: [String]
  isEmpty: Boolean
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

type TerritoryCategorization {
  id: Int!
  lowerBound: String
  territoryCategory: String
  upperBound: String
  year: String
}

type TerritoryCategorizationAvgAggregateOutputType {
  id: Float
}

input TerritoryCategorizationAvgOrderByAggregateInput {
  id: SortOrder
}

type TerritoryCategorizationCountAggregateOutputType {
  _all: Int!
  id: Int!
  lowerBound: Int!
  territoryCategory: Int!
  upperBound: Int!
  year: Int!
}

input TerritoryCategorizationCountOrderByAggregateInput {
  id: SortOrder
  lowerBound: SortOrder
  territoryCategory: SortOrder
  upperBound: SortOrder
  year: SortOrder
}

input TerritoryCategorizationCreateInput {
  lowerBound: String
  territoryCategory: String
  upperBound: String
  year: String
}

input TerritoryCategorizationCreateManyInput {
  id: Int
  lowerBound: String
  territoryCategory: String
  upperBound: String
  year: String
}

type TerritoryCategorizationMaxAggregateOutputType {
  id: Int
  lowerBound: String
  territoryCategory: String
  upperBound: String
  year: String
}

input TerritoryCategorizationMaxOrderByAggregateInput {
  id: SortOrder
  lowerBound: SortOrder
  territoryCategory: SortOrder
  upperBound: SortOrder
  year: SortOrder
}

type TerritoryCategorizationMinAggregateOutputType {
  id: Int
  lowerBound: String
  territoryCategory: String
  upperBound: String
  year: String
}

input TerritoryCategorizationMinOrderByAggregateInput {
  id: SortOrder
  lowerBound: SortOrder
  territoryCategory: SortOrder
  upperBound: SortOrder
  year: SortOrder
}

input TerritoryCategorizationOrderByWithAggregationInput {
  _avg: TerritoryCategorizationAvgOrderByAggregateInput
  _count: TerritoryCategorizationCountOrderByAggregateInput
  _max: TerritoryCategorizationMaxOrderByAggregateInput
  _min: TerritoryCategorizationMinOrderByAggregateInput
  _sum: TerritoryCategorizationSumOrderByAggregateInput
  id: SortOrder
  lowerBound: SortOrderInput
  territoryCategory: SortOrderInput
  upperBound: SortOrderInput
  year: SortOrderInput
}

input TerritoryCategorizationOrderByWithRelationInput {
  id: SortOrder
  lowerBound: SortOrderInput
  territoryCategory: SortOrderInput
  upperBound: SortOrderInput
  year: SortOrderInput
}

enum TerritoryCategorizationScalarFieldEnum {
  id
  lowerBound
  territoryCategory
  upperBound
  year
}

input TerritoryCategorizationScalarWhereWithAggregatesInput {
  AND: [TerritoryCategorizationScalarWhereWithAggregatesInput]
  NOT: [TerritoryCategorizationScalarWhereWithAggregatesInput]
  OR: [TerritoryCategorizationScalarWhereWithAggregatesInput]
  id: IntWithAggregatesFilter
  lowerBound: StringNullableWithAggregatesFilter
  territoryCategory: StringNullableWithAggregatesFilter
  upperBound: StringNullableWithAggregatesFilter
  year: StringNullableWithAggregatesFilter
}

type TerritoryCategorizationSumAggregateOutputType {
  id: Int
}

input TerritoryCategorizationSumOrderByAggregateInput {
  id: SortOrder
}

input TerritoryCategorizationUncheckedCreateInput {
  id: Int
  lowerBound: String
  territoryCategory: String
  upperBound: String
  year: String
}

input TerritoryCategorizationUncheckedUpdateInput {
  id: IntFieldUpdateOperationsInput
  lowerBound: NullableStringFieldUpdateOperationsInput
  territoryCategory: NullableStringFieldUpdateOperationsInput
  upperBound: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input TerritoryCategorizationUncheckedUpdateManyInput {
  id: IntFieldUpdateOperationsInput
  lowerBound: NullableStringFieldUpdateOperationsInput
  territoryCategory: NullableStringFieldUpdateOperationsInput
  upperBound: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input TerritoryCategorizationUpdateInput {
  lowerBound: NullableStringFieldUpdateOperationsInput
  territoryCategory: NullableStringFieldUpdateOperationsInput
  upperBound: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input TerritoryCategorizationUpdateManyMutationInput {
  lowerBound: NullableStringFieldUpdateOperationsInput
  territoryCategory: NullableStringFieldUpdateOperationsInput
  upperBound: NullableStringFieldUpdateOperationsInput
  year: NullableStringFieldUpdateOperationsInput
}

input TerritoryCategorizationWhereInput {
  AND: [TerritoryCategorizationWhereInput]
  NOT: [TerritoryCategorizationWhereInput]
  OR: [TerritoryCategorizationWhereInput]
  id: IntFilter
  lowerBound: StringNullableFilter
  territoryCategory: StringNullableFilter
  upperBound: StringNullableFilter
  year: StringNullableFilter
}

input TerritoryCategorizationWhereUniqueInput {
  AND: [TerritoryCategorizationWhereInput]
  NOT: [TerritoryCategorizationWhereInput]
  OR: [TerritoryCategorizationWhereInput]
  id: Int
  lowerBound: StringNullableFilter
  territoryCategory: StringNullableFilter
  upperBound: StringNullableFilter
  year: StringNullableFilter
}

enum TransactionIsolationLevel {
  ReadCommitted
  ReadUncommitted
  RepeatableRead
  Serializable
}

input UpdateFieldInput {
  create: Boolean
  editor: Boolean
  filter: Boolean
  id: String
  isId: Boolean
  kind: KindEnum
  list: Boolean
  name: String
  order: Int
  read: Boolean
  relationField: Boolean
  required: Boolean
  sort: Boolean
  title: String
  type: String
  unique: Boolean
  update: Boolean
  upload: Boolean
}

input UpdateModelInput {
  create: Boolean
  delete: Boolean
  displayFields: [String]
  fields: [UpdateFieldInput]
  idField: String
  name: String
  update: Boolean
}

type UserProfile {
  country: String
  division: String
  fullName: String
  id: Int!
  networkId: String
  personId: String
  reportingTo: String
  salesRepEmail: String
  title: String
}

type UserProfileAvgAggregateOutputType {
  id: Float
}

input UserProfileAvgOrderByAggregateInput {
  id: SortOrder
}

type UserProfileCountAggregateOutputType {
  _all: Int!
  country: Int!
  division: Int!
  fullName: Int!
  id: Int!
  networkId: Int!
  personId: Int!
  reportingTo: Int!
  salesRepEmail: Int!
  title: Int!
}

input UserProfileCountOrderByAggregateInput {
  country: SortOrder
  division: SortOrder
  fullName: SortOrder
  id: SortOrder
  networkId: SortOrder
  personId: SortOrder
  reportingTo: SortOrder
  salesRepEmail: SortOrder
  title: SortOrder
}

input UserProfileCreateInput {
  country: String
  division: String
  fullName: String
  networkId: String
  personId: String
  reportingTo: String
  salesRepEmail: String
  title: String
}

input UserProfileCreateManyInput {
  country: String
  division: String
  fullName: String
  id: Int
  networkId: String
  personId: String
  reportingTo: String
  salesRepEmail: String
  title: String
}

type UserProfileMaxAggregateOutputType {
  country: String
  division: String
  fullName: String
  id: Int
  networkId: String
  personId: String
  reportingTo: String
  salesRepEmail: String
  title: String
}

input UserProfileMaxOrderByAggregateInput {
  country: SortOrder
  division: SortOrder
  fullName: SortOrder
  id: SortOrder
  networkId: SortOrder
  personId: SortOrder
  reportingTo: SortOrder
  salesRepEmail: SortOrder
  title: SortOrder
}

type UserProfileMinAggregateOutputType {
  country: String
  division: String
  fullName: String
  id: Int
  networkId: String
  personId: String
  reportingTo: String
  salesRepEmail: String
  title: String
}

input UserProfileMinOrderByAggregateInput {
  country: SortOrder
  division: SortOrder
  fullName: SortOrder
  id: SortOrder
  networkId: SortOrder
  personId: SortOrder
  reportingTo: SortOrder
  salesRepEmail: SortOrder
  title: SortOrder
}

input UserProfileOrderByWithAggregationInput {
  _avg: UserProfileAvgOrderByAggregateInput
  _count: UserProfileCountOrderByAggregateInput
  _max: UserProfileMaxOrderByAggregateInput
  _min: UserProfileMinOrderByAggregateInput
  _sum: UserProfileSumOrderByAggregateInput
  country: SortOrderInput
  division: SortOrderInput
  fullName: SortOrderInput
  id: SortOrder
  networkId: SortOrderInput
  personId: SortOrderInput
  reportingTo: SortOrderInput
  salesRepEmail: SortOrderInput
  title: SortOrderInput
}

input UserProfileOrderByWithRelationInput {
  country: SortOrderInput
  division: SortOrderInput
  fullName: SortOrderInput
  id: SortOrder
  networkId: SortOrderInput
  personId: SortOrderInput
  reportingTo: SortOrderInput
  salesRepEmail: SortOrderInput
  title: SortOrderInput
}

enum UserProfileScalarFieldEnum {
  country
  division
  fullName
  id
  networkId
  personId
  reportingTo
  salesRepEmail
  title
}

input UserProfileScalarWhereWithAggregatesInput {
  AND: [UserProfileScalarWhereWithAggregatesInput]
  NOT: [UserProfileScalarWhereWithAggregatesInput]
  OR: [UserProfileScalarWhereWithAggregatesInput]
  country: StringNullableWithAggregatesFilter
  division: StringNullableWithAggregatesFilter
  fullName: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  networkId: StringNullableWithAggregatesFilter
  personId: StringNullableWithAggregatesFilter
  reportingTo: StringNullableWithAggregatesFilter
  salesRepEmail: StringNullableWithAggregatesFilter
  title: StringNullableWithAggregatesFilter
}

type UserProfileSumAggregateOutputType {
  id: Int
}

input UserProfileSumOrderByAggregateInput {
  id: SortOrder
}

input UserProfileUncheckedCreateInput {
  country: String
  division: String
  fullName: String
  id: Int
  networkId: String
  personId: String
  reportingTo: String
  salesRepEmail: String
  title: String
}

input UserProfileUncheckedUpdateInput {
  country: NullableStringFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  networkId: NullableStringFieldUpdateOperationsInput
  personId: NullableStringFieldUpdateOperationsInput
  reportingTo: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
}

input UserProfileUncheckedUpdateManyInput {
  country: NullableStringFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  networkId: NullableStringFieldUpdateOperationsInput
  personId: NullableStringFieldUpdateOperationsInput
  reportingTo: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
}

input UserProfileUpdateInput {
  country: NullableStringFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  networkId: NullableStringFieldUpdateOperationsInput
  personId: NullableStringFieldUpdateOperationsInput
  reportingTo: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
}

input UserProfileUpdateManyMutationInput {
  country: NullableStringFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  fullName: NullableStringFieldUpdateOperationsInput
  networkId: NullableStringFieldUpdateOperationsInput
  personId: NullableStringFieldUpdateOperationsInput
  reportingTo: NullableStringFieldUpdateOperationsInput
  salesRepEmail: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
}

input UserProfileWhereInput {
  AND: [UserProfileWhereInput]
  NOT: [UserProfileWhereInput]
  OR: [UserProfileWhereInput]
  country: StringNullableFilter
  division: StringNullableFilter
  fullName: StringNullableFilter
  id: IntFilter
  networkId: StringNullableFilter
  personId: StringNullableFilter
  reportingTo: StringNullableFilter
  salesRepEmail: StringNullableFilter
  title: StringNullableFilter
}

input UserProfileWhereUniqueInput {
  AND: [UserProfileWhereInput]
  NOT: [UserProfileWhereInput]
  OR: [UserProfileWhereInput]
  country: StringNullableFilter
  division: StringNullableFilter
  fullName: StringNullableFilter
  id: Int
  networkId: StringNullableFilter
  personId: StringNullableFilter
  reportingTo: StringNullableFilter
  salesRepEmail: StringNullableFilter
  title: StringNullableFilter
}

input UuidFilter {
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidFilter
  notIn: [String]
}

input UuidNullableFilter {
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidNullableFilter
  notIn: [String]
}

input UuidNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidNullableWithAggregatesFilter
  notIn: [String]
}

input UuidWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedUuidWithAggregatesFilter
  notIn: [String]
}

enum mobileSalesTargetType {
  quarter
  year
}
