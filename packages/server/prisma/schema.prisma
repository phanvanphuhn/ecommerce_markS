datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider = "prisma-kysely"
  output   = "../src/@generated/kysely"
  fileName = "types.ts"
  // Optionally generate runtime enums to a separate file
  // enumFileName = "enums.ts"
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator nestgraphql {
  provider             = "prisma-nestjs-graphql"
  output               = "../src/@generated/nestgraphql"
  combineScalarFilters = true
  noAtomicOperations   = true
  emitCompiled         = true
  purgeOutput          = true
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id           String      @id @default(cuid())
  email        String      @unique
  employeeName String
  jobTitle     String?
  division     String?
  costCenter   CostCenter? @relation(fields: [costCenterId], references: [id])

  azureADStatus ADStatus
  azureADId     String?

  reportingTo  User?   @relation("ManageUser")
  reportedBy   User?   @relation("ManageUser", fields: [reportedById], references: [id])
  reportedById String? @unique

  profile      Profile?
  costCenterId Int?

  territory   Territory? @relation(fields: [territoryId], references: [id])
  territoryId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ADStatus {
  Pending
  Active
  Inactive
  Blocked
  Deleted
}

model CostCenter {
  id          Int     @id @default(dbgenerated())
  name        String  @unique
  description String?
  users       User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id                String  @id @default(cuid())
  title             String?
  mobile            String
  preferredLanguage String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Territory {
  id          String  @id @default(cuid())
  countryName String
  countryCode String
  description String?
  division    String
  productType String  @default("Others")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  territoryId String?

  accounts TerritoryToAccount[]
}

model TerritoryToAccount {
  territory   Territory? @relation(fields: [territoryId], references: [id])
  territoryId String
  account     Account?   @relation(fields: [accountId], references: [id])
  accountId   String

  percentageSharing String
  startDate         DateTime
  endDate           DateTime?
  isActive          Boolean   @default(true)

  @@id([territoryId, accountId])
}

// This is hospitals, clinics, etc
model Account {
  id                String   @id @default(cuid())
  accountName       String?
  addressCity       String?
  addressPostalCode String?
  addressState      String?
  addressStreet     String?
  classification    String?
  country           String?
  divisions         String[]
  email             String?
  facilityType      String?
  phone             String?
  website           String?
  status            String?
  longitude         Float?
  latitude          Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  territories TerritoryToAccount[]
  Contact     Contact[]
}

model Contact {
  id            String  @id @default(cuid())
  firstName     String?
  middleName    String?
  lastName      String?
  preferredName String?
  title         String?
  designation   String?
  department    String?

  bscBU      String?
  bscRepName String?
  bscRepId   String?

  contactNumber          String?
  primaryBusinessEmail   String?
  secondaryBusinessEmail String?

  comments String?

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  divisionalContact DivisionalContact[]
}

model DivisionalContact {
  id               String  @id @default(cuid())
  contactName      String?
  division         String?
  function         String?
  phone            String?
  specialty        String?
  subSpecialty     String?
  topicsOfInterest String?

  contact   Contact? @relation(fields: [contactId], references: [id])
  contactId String?
}

// enum ScheduleType {
//   CASE_LOG
//   PLAN_CALL
// }

// model Schedule {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   subject      String
//   location     String?
//   time         String?
//   endDate      DateTime
//   startDate    DateTime
//   scheduleType ScheduleType

//   user     User      @relation(fields: [userId], references: [id])
//   userId   String
//   planCall PlanCall?
//   caseLog  CaseLog?

//   deleted DateTime?
// }

// model PlanCall {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   outcome     String?
//   type        String?
//   description String?
//   topics      String?

//   schedule   Schedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
//   scheduleId String    @unique
//   deleted    DateTime?
// }

// model CaseLog {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   account   User   @relation(fields: [accountId], references: [id])
//   accountId String

//   photoUrl          String?
//   productsInvoice   ProductsInvoice? @relation(fields: [productsInvoiceId], references: [id])
//   productsInvoiceId String?          @unique

//   schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
//   scheduleId String   @unique

//   deleted DateTime?
// }

// model ProductsInvoice {
//   id        String    @id @default(cuid())
//   createdAt DateTime  @default(now())
//   updatedAt DateTime  @updatedAt
//   products  Product[]
//   caseLog   CaseLog?
// }

// model Product {
//   name      String   @id
//   quantity  Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   productsInvoice   ProductsInvoice? @relation(fields: [productsInvoiceId], references: [id])
//   productsInvoiceId String?
// }
