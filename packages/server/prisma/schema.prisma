datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider = "prisma-kysely"
  output   = "../src/@generated/kysely"
  fileName = "types.ts"
  // Optionally generate runtime enums to a separate file
  // enumFileName = "enums.ts"
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator nestgraphql {
  provider             = "prisma-nestjs-graphql"
  output               = "../src/@generated/nestgraphql"
  combineScalarFilters = true
  noAtomicOperations   = true
  emitCompiled         = true
  purgeOutput          = true
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  password  String
  firstName String?
  lastName  String?
  role      Role    @default(USER)

  reportingTo   User? @relation("ReportingRelation", fields: [reportingToId], references: [id])
  reportingToId Int?  @unique
  reportingBy   User? @relation("ReportingRelation")

  profile  Profile?
  Schedule Schedule[]
  CaseLog  CaseLog[]
  Doctor   Doctor?
}

model Hospital {
  id      Int                @id @default(autoincrement())
  name    String
  address String
  doctors HospitalToDoctor[]
}

model Doctor {
  id          Int                @id @default(autoincrement())
  title       String
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int                @unique
  caseLog     CaseLog[]
  specialties Specialty[]
  hospitals   HospitalToDoctor[]
  divisions   Division[]
}

model HospitalToDoctor {
  hospital   Hospital @relation(fields: [hospitalId], references: [id], onDelete: Cascade)
  hospitalId Int
  doctor     Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId   Int

  @@id([hospitalId, doctorId])
}

model Profile {
  id                Int      @id @default(autoincrement())
  mobile            String
  address           Address? @relation(fields: [addressId], references: [id])
  addressId         Int?
  preferredLanguage String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int  @unique
}

model Address {
  id        Int       @id @default(autoincrement())
  street    String?
  city      String?
  state     String?
  zip       String?
  country   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  profiles  Profile[]
}

enum ScheduleType {
  CASE_LOG
  PLAN_CALL
}

model Schedule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject      String
  location     String?
  time         String?
  endDate      DateTime
  startDate    DateTime
  scheduleType ScheduleType

  user     User      @relation(fields: [userId], references: [id])
  userId   Int
  planCall PlanCall?
  caseLog  CaseLog?

  deleted DateTime?
}

model PlanCall {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  outcome     String?
  type        String?
  description String?
  topics      String?

  schedule   Schedule  @relation(fields: [scheduleId], references: [id])
  scheduleId String    @unique
  deleted    DateTime?
}

model CaseLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   User   @relation(fields: [accountId], references: [id])
  accountId Int
  doctor    Doctor @relation(fields: [doctorId], references: [id])
  doctorId  Int

  photoUrl          String?
  productsInvoice   ProductsInvoice? @relation(fields: [productsInvoiceId], references: [id])
  productsInvoiceId String           @unique

  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String   @unique

  deleted DateTime?
}

model ProductsInvoice {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  caseLog   CaseLog?
}

model Product {
  name      String   @id
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productsInvoice   ProductsInvoice? @relation(fields: [productsInvoiceId], references: [id])
  productsInvoiceId String?
}

enum Role {
  DOCTOR
  USER
}

enum Specialty {
  Orthopedics
  Surgery
  Urology
  Pediatrics
  Cardiology
  Neurosurgery
  Neurology
  Dermatology
  Radiology
}

enum Division {
  Endoscopy
  Neuromodulation
  Interventional_Cardiology
  Peripheral_Intervention
  Cardiac_Rhythm_Management
  Urology_And_Pelvic_Health
}

enum TopicsOfInterest {
  Endoscopy
  Neuromodulation
  Interventional_Cardiology
  Peripheral_Intervention
  Cardiac_Rhythm_Management
  Urology_And_Pelvic_Health
}
