datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output       = "../src/generated/kysely"
  fileName     = "types.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "enums.ts"
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id       Int        @id @default(autoincrement())
  email    String     @unique
  password String
  name     String?
  role     Role       @default(USER)
  profile  Profile?
  Schedule Schedule[]
  CaseLog  CaseLog[]
  Doctor   Doctor?
}

model Doctor {
  id      Int       @id @default(autoincrement())
  name    String
  title   String
  user    User      @relation(fields: [userId], references: [id])
  userId  Int       @unique
  caseLog CaseLog[]
}

model Profile {
  id                Int    @id @default(autoincrement())
  mobile            String
  country           String
  city              String
  division          String
  preferredLanguage String
  reportingTo       String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Schedule {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subject   String
  location  String?
  time      String?
  endDate   DateTime
  startDate DateTime

  user     User      @relation(fields: [userId], references: [id])
  userId   Int
  planCall PlanCall?
  caseLog  CaseLog?
}

model CaseLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  account   User   @relation(fields: [accountId], references: [id])
  accountId Int
  doctor    Doctor @relation(fields: [doctorId], references: [id])
  doctorId  Int

  photoUrl          String
  productsInvoice   ProductsInvoice @relation(fields: [productsInvoiceId], references: [id])
  productsInvoiceId String          @unique

  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String   @unique
}

model ProductsInvoice {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  caseLog   CaseLog?
}

model Product {
  name      String   @id
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productsInvoice   ProductsInvoice? @relation(fields: [productsInvoiceId], references: [id])
  productsInvoiceId String?
}

model PlanCall {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  outcome     String?
  type        String?
  description String?
  topics      String?

  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String   @unique
}

enum Role {
  DOCTOR
  USER
}

enum Specialty {
  Orthopedics
  Surgery
  Urology
  Pediatrics
  Cardiology
  Neurosurgery
  Neurology
  Dermatology
  Radiology
}

enum Division {
  Endoscopy
  Neuromodulation
  Interventional_Cardiology
  Peripheral_Intervention
  Cardiac_Rhythm_Management
  Urology_And_Pelvic_Health
}

enum TopicsOfInterest {
  Endoscopy
  Neuromodulation
  Interventional_Cardiology
  Peripheral_Intervention
  Cardiac_Rhythm_Management
  Urology_And_Pelvic_Health
}
