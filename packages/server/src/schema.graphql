# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CaseLog {
  _count: CaseLogCount!
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  caseLogSubmission: [CaseLogSubmission!]
  caseLogSubmissions: [CaseLogSubmission!]!
  caseName: String
  contact: String
  createdAt: DateTime
  endDate: DateTime
  id: ID!
  location: String
  photoPaths: [String!]
  secondaryContact: String
  startDate: DateTime
  status: String
  updatedAt: DateTime
}

type CaseLogCount {
  caseLogSubmission: Int!
}

input CaseLogInput {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  caseLogSubmissions: [CaseLogSubmissionInputCreate!]
  caseName: String
  contact: String
  createdAt: DateTime
  endDate: DateTime
  files: [Upload!]
  id: String
  location: String
  photoPaths: [String!]
  secondaryContact: String
  startDate: DateTime
  status: String
  updatedAt: DateTime
}

type CaseLogOutput {
  _count: CaseLogCount!
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  caseLogSubmission: [CaseLogSubmission!]
  caseLogSubmissions: [CaseLogSubmission!]
  caseName: String
  contact: String
  createdAt: DateTime
  endDate: DateTime
  id: ID!
  location: String
  photoPaths: [String!]
  secondaryContact: String
  startDate: DateTime
  status: String
  updatedAt: DateTime
}

type CaseLogSubmission {
  caseLog: CaseLogOutput!
  caseLogId: String
  createdAt: DateTime
  id: ID!
  product: Products!
  productId: String
  quantity: String
  salesRepEmail: String
  updatedAt: DateTime
}

input CaseLogSubmissionInputCreate {
  productId: String
  quantity: String
}

type ComplaintsOutput {
  awareDate: String
  complaintId: String
  complaintName: String
  complaintStatus: String
  complaintTitle: String
  country: String
  createdDate: String
  division: String
  eventDate: String
  id: String
  salesRepEmail: String
  timeOfEvent: String
  typeOfSituationReporting: String
}

type ContactSearchOutput {
  contactId: String
  doctorAlternativeEmail: String
  doctorCountry: String
  doctorDivision: String
  doctorEmail: String
  doctorName: String
  doctorPhone: String
  doctorSpecialty: String
  doctorTitle: String
  hospital: String
  id: Int
  topicsOfInterest: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type DoctorDetail {
  contactId: String
  doctorAlternativeEmail: String
  doctorCountry: String
  doctorDivision: String
  doctorEmail: String
  doctorName: String
  doctorPhone: String
  doctorSalutation: String
  doctorSpecialty: String
  doctorTitle: String
  hospital: String
  id: Int
  topicsOfInterest: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type LeaderboardOuput {
  country: String
  fullName: String
  id: String
  lastRefreshedTimestamp: DateTime
  month: String
  rankMtd: String
  rankQtd: String
  rankYtd: String
  salesRepEmail: String
  targetAchievedMtd: String
  targetAchievedQtd: String
  targetAchievedYtd: String
  year: String
}

enum LeaderboardPeriod {
  Month
  Quarter
  Year
}

enum LeaderboardType {
  Surrounding
  TopThree
}

type MobileSalesOutput {
  quarter: String
  salesRepEmail: String!
  targetByQuarter: String
  targetByYear: String
  type: mobileSalesTargetType!
  year: String
}

input MobileSearchHistoryInput {
  searchQuery: String!
  searchType: [SearchType!]
}

type MobileSearchHistoryOutput {
  createdAt: DateTimeISO
  id: String
  searchQuery: String
  searchResults: JSONObject
  searchType: [String!]
  updatedAt: DateTimeISO
}

type Mutation {
  testUpsertCaseLog(data: CaseLogInput!): CaseLog!
  upsertCaseLog(data: CaseLogInput!): CaseLog!
  upsertMobileSalesQuarter(quarter: String!, targetByQuarter: String!, year: String!): Boolean!
  upsertMobileSalesYear(targetByYear: String!, year: String!): Boolean!
  upsertPlanCall(data: PlanCallInput!): PlanCallOutput!
  upsertSearchHistory(data: MobileSearchHistoryInput!): MobileSearchHistoryOutput!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  asc
  desc
}

enum PlanCallActivitySubtype {
  CALL
  CASE_SUPPORT
  EDETAILING
  EDETAILING_VIRTUAL
  EMAIL
  FOLLOW_UP
  MARKETING_MATERIAL_PREPARATION
  MEETING
  OTHER
  PRECEPTORSHIP
  PROCTORSHIP
  PRODUCT_DEMO
  REMOTE_CASE_SUPPORT
  SEND_LETTER
  SEND_QUOTE
  WEBINARS
}

enum PlanCallActivityType {
  EVENT
  TASK
}

input PlanCallInput {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  activitySubtype: PlanCallActivitySubtype
  activityType: PlanCallActivityType
  contactId: String
  contactName: String
  createdInApp: DateTimeISO
  description: String
  division: String
  endDate: String
  lastModifiedInApp: DateTimeISO
  location: String
  ownerCountry: String
  salesForceId: String
  startDate: String
  status: PlanCallStatus
  subject: String
  uniqueIdInApp: String
}

type PlanCallOutput {
  account: String
  activityOwnerEmail: String
  activityOwnerName: String
  activitySubtype: PlanCallActivitySubtype
  activityType: PlanCallActivityType
  contactId: String
  contactName: String
  createdInApp: DateTimeISO
  description: String
  division: String
  endDate: String
  lastModifiedInApp: DateTimeISO
  location: String
  ownerCountry: String
  salesForceId: String
  startDate: String
  status: PlanCallStatus
  subject: String
  uniqueIdInApp: String
}

enum PlanCallStatus {
  CANCELLED
  COMPLETED
  IN_PROGRESS
}

type Products {
  _count: ProductsCount!
  caseLogSubmission: [CaseLogSubmission!]!
  country: String
  createdAt: DateTime
  gtin: String
  id: ID!
  updatedAt: DateTime
  upn: String
  upnDescription: String
}

type ProductsCount {
  caseLogSubmission: Int!
}

type Query {
  complaint(id: String!): ComplaintsOutput!
  complaints: [ComplaintsOutput!]!
  getCaseLog(id: String!): CaseLog!
  getCaseLogs: [CaseLog!]!
  getDoctorProfile(doctorEmail: String!): [DoctorDetail!]
  getDoctorProfileByContactId(contactId: String!): [DoctorDetail!]
  getDoctorSearchList(doctorAlternativeEmail: String, doctorCountry: String, doctorDivisions: [String!], doctorName: String, doctorSpecialties: [String!], doctorTitle: String, hospital: String, topicsOfInterests: [String!]): [ContactSearchOutput!]
  getFile(filePath: String!): JSON!
  getFilterDivisionList: [String!]
  getFilterHospitalList(doctorDivisions: [String!], doctorSpecialties: [String!], topicsOfInterests: [String!]): [String!]
  getFilterSpecialtyList: [String!]
  getFilterTopicsOfInterestList: [String!]
  getMobileSales(quarter: String, type: mobileSalesTargetType!, year: String): [MobileSalesOutput!]!
  getPlanCall(id: String!): PlanCallOutput!
  getPlanCallTypes: [String!]!
  getPlanCalls(account: String, activityOwnerEmail: String, activityOwnerName: String, activitySubtype: PlanCallActivitySubtype, activityType: PlanCallActivityType, contactId: String, contactName: String, createdInApp: DateTimeISO, description: String, division: String, endDate: String, lastModifiedInApp: DateTimeISO, location: String, ownerCountry: String, startDate: String, status: [PlanCallStatus!], subject: String, uniqueIdInApp: String): [PlanCallOutput!]!
  getProducts(createdAt: DateTimeISO, gtin: String, id: String, skip: Int, take: Int, updatedAt: DateTimeISO, upn: String, upnDescription: String): [Products!]!
  getSales(month: String, quarter: String, year: String): [SalesOutput!]!
  getSearchHistory(searchType: [SearchType!], skip: Int, sort: OrderDirection, take: Int): [MobileSearchHistoryOutput!]!
  getSelfCalendars: JSON!
  getSliderAndCommisions: [SliderAndCommissionOutput!]!
  getTerritoryCategorization: [TerritoryCategorizationOutput!]!
  getUserProfile: [UserProfileOutput!]!
  leaderboard(country: String, month: String, period: LeaderboardPeriod = Month, type: LeaderboardType = TopThree, year: String!): [LeaderboardOuput!]!
  me: JSON!
  meAD(accessToken: String!): JSON!
  meGroup(accessToken: String!): JSON!
  testGetFilterHospitalList(doctorDivisions: [String!], doctorSpecialties: [String!], topicsOfInterests: [String!]): [String!]!
}

type SalesOutput {
  additionalPayout: String
  additionalPayoutCE: String
  additionalPayoutSC: String
  capitalEquipment: String
  commissionPayoutByQuarter: String
  commissionPayoutByQuarter_forNewHire: String
  commissionPayoutQ5: String
  commissionPayoutQ5_forNewHire: String
  commissionPercentageByQuarter: String
  commissionPercentageByQuarter_forNewHire: String
  commissionPercentageQ5: String
  commissionPercentageQ5_forNewHire: String
  currency: String
  earlyBird: String
  earlyBirdEligibility: String
  guaranttedPayout: String
  kicker: String
  mixedBag: String
  month: String
  newHire: String
  productType: String
  quarter: String
  salesAchievementPercentageByMonth: String
  salesAchievementPercentageByQuarter: String
  salesAchievementPercentageByYear: String
  salesAchievementPercentageByYear_forNewHire: String
  salesAchivementPercentageByQuarter_forNewHire: String
  salesByMonth: String
  salesByMonth_forNewHire: String
  salesByQuarter: String
  salesByQuarter_forNewHire: String
  salesByYear: String
  salesByYear_forNewHire: String
  salesRepEmail: String
  serviceContract: String
  sipEligibility: String
  targetByMonth: String
  targetByQuarter: String
  targetByYear: String
  targetByYearUSD: String
  territoryCategory: String
  variablePayByMonth: String
  variablePayByQuarter: String
  variablePayByYear: String
  variablePayQ5: String
  variablePayoutByQuarter: String
  variablePayoutByQuarter_forNewHire: String
  variablePayoutPercentageByQuarter: String
  variablePayoutPercentageByQuarter_forNewHire: String
  variablePayoutPercentageByYear: String
  variablePayoutPercentageQ5: String
  variablePayoutPercentageQ5_forNewHire: String
  variablePayoutQ5: String
  variablePayoutQ5_forNewHire: String
  year: String
}

enum SearchType {
  CaseLog
  ContactSearch
  PlanCall
}

type SliderAndCommissionOutput {
  commissionPercentage: String
  lowerBound: String
  territoryCategory: String
  upperBound: String
  variablePayoutPercentage: String
  year: String
}

type TerritoryCategorizationOutput {
  lowerBound: String
  territoryCategory: String
  upperBound: String
  year: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UserProfileOutput {
  country: String
  division: String
  fullName: String
  id: Int
  reportingTo: String
  salesRepEmail: String
  title: String
}

enum mobileSalesTargetType {
  quarter
  year
}