# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum ADStatus {
  Active
  Blocked
  Deleted
  Inactive
  Pending
}

type Account {
  _count: AccountCount!
  accountName: String
  addressCity: String
  addressPostalCode: String
  addressState: String
  addressStreet: String
  classification: String
  contact: [Contact!]
  country: String
  createdAt: DateTime!
  divisions: [String!]
  email: String
  facilityType: String
  id: ID!
  latitude: Float
  longitude: Float
  phone: String
  status: String
  territories: [TerritoryToAccount!]
  updatedAt: DateTime!
  website: String
}

type AccountCount {
  contact: Int!
  territories: Int!
}

input AccountOrderByWithRelationInput {
  accountName: SortOrderInput
  addressCity: SortOrderInput
  addressPostalCode: SortOrderInput
  addressState: SortOrderInput
  addressStreet: SortOrderInput
  classification: SortOrderInput
  contact: ContactOrderByRelationAggregateInput
  country: SortOrderInput
  createdAt: SortOrder
  divisions: SortOrder
  email: SortOrderInput
  facilityType: SortOrderInput
  id: SortOrder
  latitude: SortOrderInput
  longitude: SortOrderInput
  phone: SortOrderInput
  status: SortOrderInput
  territories: TerritoryToAccountOrderByRelationAggregateInput
  updatedAt: SortOrder
  website: SortOrderInput
}

input AccountRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  accountName: StringFilter
  addressCity: StringFilter
  addressPostalCode: StringFilter
  addressState: StringFilter
  addressStreet: StringFilter
  classification: StringFilter
  contact: ContactListRelationFilter
  country: StringFilter
  createdAt: DateTimeFilter
  divisions: StringListFilter
  email: StringFilter
  facilityType: StringFilter
  id: StringFilter
  latitude: FloatFilter
  longitude: FloatFilter
  phone: StringFilter
  status: StringFilter
  territories: TerritoryToAccountListRelationFilter
  updatedAt: DateTimeFilter
  website: StringFilter
}

input BoolFilter {
  equals: Boolean
  not: BoolFilter
}

type Contact {
  _count: ContactCount!
  account: Account
  accountId: String
  bscBU: String
  bscRepId: String
  bscRepName: String
  comments: String
  contactNumber: String
  department: String
  designation: String
  divisionalContact: [DivisionalContact!]
  firstName: String
  id: ID!
  lastName: String
  middleName: String
  preferredName: String
  primaryBusinessEmail: String
  secondaryBusinessEmail: String
  title: String
}

type ContactCount {
  divisionalContact: Int!
}

input ContactListRelationFilter {
  every: ContactWhereInput
  none: ContactWhereInput
  some: ContactWhereInput
}

input ContactOrderByRelationAggregateInput {
  _count: SortOrder
}

input ContactOrderByWithRelationInput {
  account: AccountOrderByWithRelationInput
  accountId: SortOrderInput
  bscBU: SortOrderInput
  bscRepId: SortOrderInput
  bscRepName: SortOrderInput
  comments: SortOrderInput
  contactNumber: SortOrderInput
  department: SortOrderInput
  designation: SortOrderInput
  divisionalContact: DivisionalContactOrderByRelationAggregateInput
  firstName: SortOrderInput
  id: SortOrder
  lastName: SortOrderInput
  middleName: SortOrderInput
  preferredName: SortOrderInput
  primaryBusinessEmail: SortOrderInput
  secondaryBusinessEmail: SortOrderInput
  title: SortOrderInput
}

input ContactRelationFilter {
  is: ContactWhereInput
  isNot: ContactWhereInput
}

enum ContactScalarFieldEnum {
  accountId
  bscBU
  bscRepId
  bscRepName
  comments
  contactNumber
  department
  designation
  firstName
  id
  lastName
  middleName
  preferredName
  primaryBusinessEmail
  secondaryBusinessEmail
  title
}

input ContactWhereExtension {
  AND: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  bscBU: StringFilter
  bscRepId: StringFilter
  bscRepName: StringFilter
  comments: StringFilter
  contactNumber: StringFilter
  department: StringFilter
  designation: StringFilter
  divisionalContact: DivisionalContactListRelationFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  middleName: StringFilter
  preferredName: StringFilter
  primaryBusinessEmail: StringFilter
  secondaryBusinessEmail: StringFilter
  territoryId: String
  title: StringFilter
}

input ContactWhereInput {
  AND: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  bscBU: StringFilter
  bscRepId: StringFilter
  bscRepName: StringFilter
  comments: StringFilter
  contactNumber: StringFilter
  department: StringFilter
  designation: StringFilter
  divisionalContact: DivisionalContactListRelationFilter
  firstName: StringFilter
  id: StringFilter
  lastName: StringFilter
  middleName: StringFilter
  preferredName: StringFilter
  primaryBusinessEmail: StringFilter
  secondaryBusinessEmail: StringFilter
  title: StringFilter
}

input ContactWhereUniqueInput {
  AND: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  bscBU: StringFilter
  bscRepId: StringFilter
  bscRepName: StringFilter
  comments: StringFilter
  contactNumber: StringFilter
  department: StringFilter
  designation: StringFilter
  divisionalContact: DivisionalContactListRelationFilter
  firstName: StringFilter
  id: String
  lastName: StringFilter
  middleName: StringFilter
  preferredName: StringFilter
  primaryBusinessEmail: StringFilter
  secondaryBusinessEmail: StringFilter
  title: StringFilter
}

type CostCenter {
  _count: CostCenterCount!
  createdAt: DateTime!
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
  users: [User!]
}

type CostCenterCount {
  users: Int!
}

input CostCenterOrderByWithRelationInput {
  createdAt: SortOrder
  description: SortOrderInput
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  users: UserOrderByRelationAggregateInput
}

input CostCenterRelationFilter {
  is: CostCenterWhereInput
  isNot: CostCenterWhereInput
}

input CostCenterWhereInput {
  AND: [CostCenterWhereInput!]
  NOT: [CostCenterWhereInput!]
  OR: [CostCenterWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: IntFilter
  name: StringFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTimeFilter
  notIn: [DateTime!]
}

type DivisionalContact {
  contact: Contact
  contactId: String
  contactName: String
  division: String
  function: String
  id: ID!
  phone: String
  specialty: String
  subSpecialty: String
  topicsOfInterest: [String!]
}

input DivisionalContactListRelationFilter {
  every: DivisionalContactWhereInput
  none: DivisionalContactWhereInput
  some: DivisionalContactWhereInput
}

input DivisionalContactOrderByRelationAggregateInput {
  _count: SortOrder
}

input DivisionalContactWhereInput {
  AND: [DivisionalContactWhereInput!]
  NOT: [DivisionalContactWhereInput!]
  OR: [DivisionalContactWhereInput!]
  contact: ContactRelationFilter
  contactId: StringFilter
  contactName: StringFilter
  division: StringFilter
  function: StringFilter
  id: StringFilter
  phone: StringFilter
  specialty: StringFilter
  subSpecialty: StringFilter
  topicsOfInterest: StringListFilter
}

input EnumADStatusFilter {
  equals: ADStatus
  in: [ADStatus!]
  not: EnumADStatusFilter
  notIn: [ADStatus!]
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: FloatFilter
  notIn: [Float!]
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: IntFilter
  notIn: [Int!]
}

enum NullsOrder {
  first
  last
}

type Profile {
  createdAt: DateTime!
  id: ID!
  mobile: String!
  preferredLanguage: String!
  title: String
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input ProfileOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  mobile: SortOrder
  preferredLanguage: SortOrder
  title: SortOrderInput
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input ProfileRelationFilter {
  is: ProfileWhereInput
  isNot: ProfileWhereInput
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  mobile: StringFilter
  preferredLanguage: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

type Query {
  contacts(cursor: ContactWhereUniqueInput, distinct: [ContactScalarFieldEnum!], orderBy: [ContactOrderByWithRelationInput!], skip: Int, take: Int, where: ContactWhereInput): [Contact!]!
  contactsByTerritory(cursor: ContactWhereUniqueInput, distinct: [ContactScalarFieldEnum!], orderBy: [ContactOrderByWithRelationInput!], skip: Int, take: Int, where: ContactWhereExtension): [Contact!]!
  me: User!
  territories(cursor: TerritoryWhereUniqueInput, distinct: [TerritoryScalarFieldEnum!], orderBy: [TerritoryOrderByWithRelationInput!], skip: Int, take: Int, where: TerritoryWhereInput): [Territory!]!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input SortOrderInput {
  nulls: NullsOrder
  sort: SortOrder!
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: StringFilter
  notIn: [String!]
  startsWith: String
}

input StringListFilter {
  equals: [String!]
  has: String
  hasEvery: [String!]
  hasSome: [String!]
  isEmpty: Boolean
}

type Territory {
  _count: TerritoryCount!
  accounts: [TerritoryToAccount!]
  countryCode: String!
  countryName: String!
  createdAt: DateTime!
  description: String
  division: String!
  id: ID!
  productType: String!
  updatedAt: DateTime!
  users: [User!]
}

type TerritoryCount {
  accounts: Int!
  users: Int!
}

input TerritoryOrderByWithRelationInput {
  accounts: TerritoryToAccountOrderByRelationAggregateInput
  countryCode: SortOrder
  countryName: SortOrder
  createdAt: SortOrder
  description: SortOrderInput
  division: SortOrder
  id: SortOrder
  productType: SortOrder
  updatedAt: SortOrder
  users: UserOrderByRelationAggregateInput
}

input TerritoryRelationFilter {
  is: TerritoryWhereInput
  isNot: TerritoryWhereInput
}

enum TerritoryScalarFieldEnum {
  countryCode
  countryName
  createdAt
  description
  division
  id
  productType
  updatedAt
}

type TerritoryToAccount {
  account: Account
  accountId: String!
  endDate: DateTime
  isActive: Boolean!
  percentageSharing: String!
  startDate: DateTime!
  territory: Territory
  territoryId: String!
}

input TerritoryToAccountListRelationFilter {
  every: TerritoryToAccountWhereInput
  none: TerritoryToAccountWhereInput
  some: TerritoryToAccountWhereInput
}

input TerritoryToAccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input TerritoryToAccountWhereInput {
  AND: [TerritoryToAccountWhereInput!]
  NOT: [TerritoryToAccountWhereInput!]
  OR: [TerritoryToAccountWhereInput!]
  account: AccountRelationFilter
  accountId: StringFilter
  endDate: DateTimeFilter
  isActive: BoolFilter
  percentageSharing: StringFilter
  startDate: DateTimeFilter
  territory: TerritoryRelationFilter
  territoryId: StringFilter
}

input TerritoryWhereInput {
  AND: [TerritoryWhereInput!]
  NOT: [TerritoryWhereInput!]
  OR: [TerritoryWhereInput!]
  accounts: TerritoryToAccountListRelationFilter
  countryCode: StringFilter
  countryName: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  division: StringFilter
  id: StringFilter
  productType: StringFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

input TerritoryWhereUniqueInput {
  AND: [TerritoryWhereInput!]
  NOT: [TerritoryWhereInput!]
  OR: [TerritoryWhereInput!]
  accounts: TerritoryToAccountListRelationFilter
  countryCode: StringFilter
  countryName: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  division: StringFilter
  id: String
  productType: StringFilter
  updatedAt: DateTimeFilter
  users: UserListRelationFilter
}

type User {
  azureADId: String
  azureADStatus: ADStatus!
  costCenter: CostCenter
  costCenterId: Int
  createdAt: DateTime!
  division: String
  email: String!
  employeeName: String!
  id: ID!
  jobTitle: String
  profile: Profile
  reportedBy: User
  reportedById: String
  reportingTo: User
  territory: Territory
  territoryId: String
  updatedAt: DateTime!
}

input UserListRelationFilter {
  every: UserWhereInput
  none: UserWhereInput
  some: UserWhereInput
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  azureADId: SortOrderInput
  azureADStatus: SortOrder
  costCenter: CostCenterOrderByWithRelationInput
  costCenterId: SortOrderInput
  createdAt: SortOrder
  division: SortOrderInput
  email: SortOrder
  employeeName: SortOrder
  id: SortOrder
  jobTitle: SortOrderInput
  profile: ProfileOrderByWithRelationInput
  reportedBy: UserOrderByWithRelationInput
  reportedById: SortOrderInput
  reportingTo: UserOrderByWithRelationInput
  territory: TerritoryOrderByWithRelationInput
  territoryId: SortOrderInput
  updatedAt: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  azureADId
  azureADStatus
  costCenterId
  createdAt
  division
  email
  employeeName
  id
  jobTitle
  reportedById
  territoryId
  updatedAt
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  azureADId: StringFilter
  azureADStatus: EnumADStatusFilter
  costCenter: CostCenterRelationFilter
  costCenterId: IntFilter
  createdAt: DateTimeFilter
  division: StringFilter
  email: StringFilter
  employeeName: StringFilter
  id: StringFilter
  jobTitle: StringFilter
  profile: ProfileRelationFilter
  reportedBy: UserRelationFilter
  reportedById: StringFilter
  reportingTo: UserRelationFilter
  territory: TerritoryRelationFilter
  territoryId: StringFilter
  updatedAt: DateTimeFilter
}

input UserWhereUniqueInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  azureADId: StringFilter
  azureADStatus: EnumADStatusFilter
  costCenter: CostCenterRelationFilter
  costCenterId: IntFilter
  createdAt: DateTimeFilter
  division: StringFilter
  email: String
  employeeName: StringFilter
  id: String
  jobTitle: StringFilter
  profile: ProfileRelationFilter
  reportedBy: UserRelationFilter
  reportedById: String
  reportingTo: UserRelationFilter
  territory: TerritoryRelationFilter
  territoryId: StringFilter
  updatedAt: DateTimeFilter
}